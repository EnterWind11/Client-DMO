#define yy_create_buffer NSFParser_create_buffer
#define yy_delete_buffer NSFParser_delete_buffer
#define yy_scan_buffer NSFParser_scan_buffer
#define yy_scan_string NSFParser_scan_string
#define yy_scan_bytes NSFParser_scan_bytes
#define yy_flex_debug NSFParser_flex_debug
#define yy_init_buffer NSFParser_init_buffer
#define yy_flush_buffer NSFParser_flush_buffer
#define yy_load_buffer_state NSFParser_load_buffer_state
#define yy_switch_to_buffer NSFParser_switch_to_buffer
#define yyin NSFParserin
#define yyleng NSFParserleng
#define yylex NSFParserlex
#define yyout NSFParserout
#define yyrestart NSFParserrestart
#define yytext NSFParsertext
#define yywrap NSFParserwrap

#line 20 "..\\NSFLexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 317
#define YY_END_OF_BUFFER 318
static yyconst short int yy_accept[2005] =
    {   0,
        0,    0,  318,  317,    1,  312,  313,  317,   10,   11,
       20,   22,   18,   23,   21,    2,    2,   14,   17,   15,
       12,   13,   19,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
        8,   16,    9,    1,    0,  316,    2,    7,    6,    0,
        3,    0,    2,  314,  314,  315,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,    3,  315,    3,  315,  315,    0,

        4,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  315,  314,  314,  314,    3,    0,    0,
        3,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  142,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  112,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  310,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,    5,
      314,  314,  314,    3,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  311,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      143,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  110,  115,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  111,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      278,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  175,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  127,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  107,  314,  314,  314,
      314,  314,  314,  314,  314,  294,  314,  314,  314,  314,
      314,  314,  237,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  223,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  277,  197,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  228,
      233,  229,  314,  314,  314,  232,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  302,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  270,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  218,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  141,  314,  314,
      314,  283,  285,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,   24,  234,  314,  231,
      314,  314,  314,  314,   26,  314,  314,   36,  314,  314,
      314,  314,  314,   33,  314,  314,  314,  314,   85,  314,
      314,  314,  314,  314,  314,  314,  314,  314,   84,  314,
      314,  314,  314,  314,   93,  314,  314,  106,  108,  314,
      314,  100,  314,  314,  314,  314,  172,  314,  293,  300,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      261,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  176,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  292,  299,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  113,  314,  314,  314,  314,  314,  280,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  295,  314,
      314,  314,  230,  235,  314,   25,  314,  314,  314,  314,

       38,  314,  314,   32,  314,  314,  314,  314,  314,  314,
       52,   53,   54,   55,  314,  314,  314,  314,  314,  314,
       73,   74,   75,   76,   58,   59,   60,   61,   62,  314,
      314,  314,  314,  314,  314,  314,  314,  314,   99,  314,
      109,  314,  314,  314,  314,  314,  314,  314,  314,  297,
      314,  314,  219,  220,  314,  314,  224,  225,  314,  314,
      314,  255,  314,  272,  314,  314,  314,  314,  314,  276,
      275,  314,  314,  314,  314,  262,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  116,  314,  314,  314,  314,  314,  314,  314,
      118,  314,  288,  289,  314,  314,  282,  284,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,   35,  314,   48,  314,
      314,  314,   49,  314,  314,  314,   77,  314,  314,  314,
      314,  314,  314,   64,   66,   68,   70,   78,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  102,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      222,  314,  257,  314,  271,  314,  314,  314,  274,  314,
      314,  314,  314,  263,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  191,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  149,  314,  314,  145,  314,
      314,  314,  314,  144,  314,  314,  314,  314,  314,  314,
      167,  168,  169,  170,  314,  314,  314,  314,  173,  174,
      314,  301,  314,  125,  119,  314,  314,  314,  314,  314,
      314,  314,  281,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  307,  314,  236,  314,   50,
      314,  314,  314,  314,   28,   37,  314,   56,  314,   86,
      314,  314,  314,  314,   72,  314,   80,   82,  314,  314,
      314,  314,  103,  314,  314,   96,  314,  101,  314,  279,
      298,  296,  314,  314,  314,  314,  258,  314,  256,  314,
      185,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  194,  314,  314,
      314,  200,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      154,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  166,  314,  314,  177,  314,  314,  314,  120,  121,
      122,  117,  314,  314,  314,  314,  314,  314,  138,  314,
      314,  314,  314,  314,  314,  314,  309,  308,  314,  314,
      314,  314,   51,   34,   47,   39,   40,   41,   42,   43,
       44,   45,   46,   87,   88,  314,  314,  314,  314,  314,
      314,  314,   94,  314,  314,  314,  105,  314,  314,  314,
      314,  227,  221,  314,  314,  314,  190,  273,  314,  314,
      314,  314,  314,  267,  198,  201,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  150,  151,  152,  314,  314,  314,
      146,  147,  148,  153,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  123,  126,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  140,  306,  314,  314,  314,  314,   63,
       65,   67,   69,   79,  314,   57,   92,   89,  314,  314,
      314,  314,  104,  287,  314,  314,  314,  314,  314,  314,
      268,  314,  314,  314,  314,  314,  314,  314,  314,  214,
      314,  195,  196,  314,  314,  314,  314,  314,  192,  193,
      238,  239,  240,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  171,
      178,  314,  286,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,   29,   71,
       81,   83,  314,   90,   91,  314,   97,  290,  291,  314,
      314,  314,  314,  314,  314,  314,  314,  199,  314,  314,
      314,  314,  314,  216,  314,  314,  314,  217,  209,  251,
      314,  314,  314,  253,  314,  314,  242,  314,  314,  243,
      244,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  139,  124,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      131,  314,   27,   31,   30,  314,   98,  314,  314,  259,
      314,  314,  314,  264,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  252,  250,
      314,  314,  314,  314,  314,  314,  314,  155,  156,  157,
      158,  314,  314,  314,  314,  314,  314,  314,  179,  314,
      314,  314,  314,  303,  314,  314,  314,  129,  314,  314,
      314,  314,  314,  114,  314,  226,  260,  314,  314,  314,
      314,  314,  266,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  241,  314,  314,  314,  246,  314,  248,

      314,  159,  161,  162,  314,  314,  314,  184,  314,  314,
      181,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  269,  265,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  249,
      314,  314,  160,  164,  314,  182,  183,  314,  314,  314,
      314,  314,  128,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  254,  247,  245,  314,  180,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  205,  314,  206,  314,  314,  314,  314,

      314,  314,  314,  304,  314,  314,  135,  314,  314,  314,
      314,  314,  314,  186,  314,  314,  208,  202,  314,  203,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  134,  314,  314,  188,  204,  314,  314,
      314,  314,  314,  314,  314,  314,  305,  130,  314,  314,
      314,  132,   95,  187,  314,  207,  215,  314,  314,  314,
      314,  314,  314,  137,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  136,  314,  314,  314,  314,  314,  314,
      163,  314,  314,  314,  210,  211,  314,  314,  165,  314,
      314,  314,  314,  314,  314,  314,  314,  133,  314,  212,

      213,  314,  189,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    1,    1,    1,    1,    1,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   22,    1,    1,   23,
       24,   25,    1,    1,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       26,    1,   27,    1,   28,    1,   29,   30,   31,   32,

       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[58] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    1,
        3,    4,    5,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    1,    7,    7,    7,
        7,    7,    8,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    1,    1,    1
    } ;

static yyconst short int yy_base[2013] =
    {   0,
        0,    0,  196, 6869,  190, 6869, 6869,  152, 6869, 6869,
     6869,    0, 6869,    0,   50,   52,   93, 6869, 6869, 6869,
     6869, 6869,   47,   49,   79,   77,   63,   86,   65,   89,
      111,  113,  119,   70,  124,  126,  129,  166,   72,  203,
     6869, 6869, 6869,  148,  138, 6869,  123, 6869, 6869,  117,
      237,  114,    0,   67,  259,    0,  121,  132,  134,  139,
       74,  161,  148,  150,  171,  173,  175,  188,  178,  181,
      192,  190,  222,  235,  255,  232,  226,  272,  252,  283,
      289,  293,  295,  297,  299,  302,  307,  228,  322,  333,
      330,  230,  128,  324,   88,  224,  367,    0,  392,   80,

        0,  335,  344,  348,  337,  380,  386,  342,  382,  384,
      392,  407,  411,  413,  420,  422,  424,  429,  431,  435,
      437,  444,  446,  452,  354,  454,  442,  463,  465,  473,
      475,  478,  481,  483,  487,  489,  494,  491,  499,  504,
      506,  520,  508,  526,  529,  531,  537,  540,  543,  546,
      549,  552,  554,  587,  556,  567,  563,   63,  197,  312,
      354,  572,  577,  579,  598,  603,  605,  608,  610,  614,
      616,  618,  620,  622,  628,  625,  635,  649,  651,  653,
      658,  663,  666,  366,  668,  670,  707,  679,  684,  726,
      673,  686,  696,  702,  704,  721,  729,  740,  723,  712,

      731,  753,  759,  766,  768,  772,  774,  776,  778,  781,
      783,  786,  790,  792,  796,  794,  832,  813,  815,  819,
      836,  826,  834,  839,  844,  841,  828,  862,  865,    0,
      868,  873,  876,    0,  880,  882,  886,  888,  890,  893,
      895,  897,  906,  901,  908,  912,  917,  919,  924,  929,
      935,  937,  939,  941,  943,  945,  947,  955,  949,  958,
      969,  971,  978,  985,  987,  989,  991,  993,  995,  997,
      999, 1006, 1003, 1009, 1013, 1021, 1029, 1034, 1040, 1042,
     1045, 1047, 1049, 1055, 1057, 1060, 1062, 1064, 1072, 1081,
     1084, 1090, 1093, 1096, 1098, 1101, 1103, 1105, 1107, 1110,

     1115, 1117, 1119, 1125, 1133, 1138, 1140, 1142, 1145, 1151,
     1153, 1156, 1163, 1168, 1172, 1174, 1205, 1176, 1183, 1187,
     1192, 1195, 1199, 1197, 1208, 1211, 1225, 1218, 1213, 1201,
     1239, 1247, 1220, 1251, 1253, 1255, 1258, 1263, 1261, 1265,
     1270, 1275, 1280, 1282, 1284, 1294, 1287, 1296, 1298, 1301,
     1306, 1308, 1311, 1315, 1313, 1320, 1322, 1324, 1326, 1328,
     1344, 1346, 1348, 1350, 1352, 1356, 1358, 1360, 1362, 1368,
     1373, 1375, 1377, 1380, 1382, 1388, 1390, 1394, 1397, 1404,
     1408, 1412, 1414, 1420, 1416, 1423, 1425, 1429, 1427, 1431,
     1433, 1435, 1443, 1449, 1454, 1456, 1461, 1459, 1466, 1468,

     1470, 1472, 1478, 1481, 1483, 1485, 1491, 1493, 1497, 1500,
     1503, 1505, 1509, 1517, 1519, 1523, 1525, 1534, 1536, 1545,
     1547, 1549, 1551, 1555, 1560, 1557, 1562, 1564, 1567, 1571,
     1575, 1584, 1591, 1586, 1597, 1599, 1601, 1606, 1609, 1612,
     1616, 1625, 1630, 1633, 1638, 1644, 1646, 1648, 1650, 1652,
     1654, 1657, 1662, 1667, 1659, 1670, 1676, 1672, 1704, 1683,
     1685, 1688, 1692, 1696, 1699, 1706, 1710, 1712, 1701, 1730,
     1708, 1734, 1737, 1743, 1745, 1747, 1749, 1751, 1784, 1758,
     1760, 1763, 1766, 1769, 1771, 1773, 1777, 1791, 1780, 1810,
     1814, 1804, 1822, 1817, 1786, 1824, 1830, 1832, 1840, 1842,

     1844, 1856, 1858, 1862, 1864, 1789, 1866, 1870, 1875, 1877,
     1879, 1882, 1884, 1887, 1894, 1898, 1900, 1902, 1910, 1904,
     1914, 1916, 1919, 1930, 1936, 1939, 1941, 1945, 1948, 1950,
     1952, 1954, 1956, 1958, 1961, 1963, 1967, 1971, 1980, 1975,
     1989, 1993, 1995, 2001, 1997, 2003, 2006, 2008, 2011, 2014,
     2018, 2022, 2024, 2031, 2034, 2036, 2039, 2041, 2046, 2049,
     2052, 2058, 2060, 2062, 2064, 2072, 2074, 2076, 2078, 2080,
     2087, 2083, 2089, 2092, 2106, 2108, 2110, 2114, 2116, 2119,
     2121, 2125, 2127, 2129, 2131, 2138, 2143, 2145, 2147, 2149,
     2151, 2153, 2161, 2163, 2165, 2173, 2175, 2177, 2180, 2184,

     2186, 2189, 2191, 2196, 2199, 2207, 2210, 2212, 2217, 2228,
     2230, 2233, 2237, 2240, 2242, 2245, 2247, 2250, 2253, 2260,
     2262, 2257, 2268, 2275, 2271, 2277, 2280, 2283, 2289, 2294,
     2301, 2303, 2305, 2307, 2309, 2313, 2317, 2323, 2326, 2328,
     2335, 2339, 2348, 2351, 2354, 2356, 2358, 2363, 2370, 2372,
     2376, 2379, 2381, 2385, 2388, 2390, 2392, 2396, 2403, 2405,
     2410, 2413, 2419, 2421, 2423, 2429, 2431, 2433, 2435, 2438,
     2440, 2442, 2444, 2449, 2451, 2453, 2462, 2465, 2467, 2471,
     2473, 2477, 2480, 2484, 2486, 2489, 2494, 2496, 2499, 2504,
     2506, 2508, 2518, 2521, 2523, 2532, 2534, 2536, 2538, 2541,

     2545, 2547, 2549, 2553, 2556, 2558, 2564, 2568, 2575, 2580,
     2582, 2587, 2591, 2593, 2595, 2597, 2599, 2607, 2609, 2614,
     2616, 2621, 2624, 2626, 2628, 2630, 2634, 2638, 2640, 2642,
     2644, 2649, 2652, 2654, 2668, 2673, 2670, 2677, 2681, 2683,
     2685, 2689, 2691, 2693, 2695, 2697, 2699, 2705, 2710, 2716,
     2723, 2727, 2730, 2732, 2734, 2736, 2738, 2740, 2742, 2753,
     2755, 2757, 2759, 2761, 2763, 2770, 2774, 2780, 2776, 2782,
     2784, 2786, 2794, 2804, 2808, 2817, 2810, 2819, 2822, 2824,
     2826, 2828, 2831, 2833, 2836, 2842, 2846, 2848, 2851, 2857,
     2864, 2866, 2869, 2873, 2875, 2880, 2884, 2890, 2892, 2894,

     2896, 2899, 2901, 2904, 2910, 2912, 2918, 2920, 2922, 2924,
     2929, 2932, 2937, 2940, 2942, 2944, 2946, 2950, 2956, 2960,
     2962, 2964, 2966, 2972, 2977, 2974, 2983, 2985, 2987, 2992,
     2996, 2998, 3000, 3003, 3005, 3009, 3011, 3013, 3018, 3027,
     3020, 3029, 3031, 3033, 3041, 3043, 3045, 3051, 3054, 3057,
     3065, 3067, 3070, 3074, 3077, 3095, 3102, 3110, 3080, 3082,
     3088, 3090, 3113, 3120, 3122, 3124, 3126, 3130, 3132, 3134,
     3136, 3138, 3142, 3140, 3147, 3145, 3149, 3155, 3157, 3159,
     3166, 3168, 3171, 3173, 3177, 3179, 3181, 3183, 3186, 3188,
     3191, 3195, 3203, 3205, 3211, 3213, 3220, 3222, 3227, 3229,

     3231, 3233, 3235, 3241, 3238, 3243, 3256, 3261, 3263, 3267,
     3269, 3271, 3273, 3275, 3277, 3281, 3285, 3289, 3291, 3294,
     3299, 3312, 3305, 3314, 3317, 3319, 3323, 3326, 3331, 3338,
     3340, 3342, 3344, 3346, 3348, 3350, 3356, 3361, 3363, 3366,
     3369, 3375, 3381, 3383, 3387, 3389, 3397, 3401, 3407, 3409,
     3405, 3411, 3415, 3418, 3420, 3427, 3435, 3440, 3442, 3448,
     3450, 3452, 3457, 3459, 3461, 3464, 3466, 3468, 3470, 3472,
     3474, 3482, 3484, 3489, 3496, 3493, 3505, 3509, 3511, 3513,
     3515, 3521, 3523, 3528, 3525, 3530, 3533, 3537, 3539, 3542,
     3550, 3558, 3560, 3562, 3564, 3566, 3568, 3577, 3570, 3582,

     3579, 3584, 3589, 3591, 3596, 3601, 3607, 3609, 3612, 3616,
     3614, 3618, 3625, 3627, 3629, 3633, 3635, 3637, 3639, 3649,
     3643, 3655, 3657, 3659, 3661, 3664, 3667, 3669, 3671, 3673,
     3675, 3682, 3685, 3687, 3689, 3692, 3705, 3695, 3707, 3710,
     3712, 3718, 3720, 3722, 3726, 3728, 3730, 3732, 3736, 3742,
     3744, 3746, 3750, 3757, 3760, 3763, 3768, 3770, 3773, 3778,
     3780, 3782, 3784, 3786, 3788, 3790, 3792, 3795, 3798, 3800,
     3802, 3806, 3808, 3813, 3817, 3819, 3825, 3827, 3829, 3831,
     3833, 3835, 3840, 3843, 3846, 3848, 3853, 3855, 3857, 3862,
     3868, 3870, 3876, 3878, 3880, 3882, 3884, 3888, 3891, 3900,

     3906, 3908, 3910, 3913, 3915, 3920, 3923, 3926, 3928, 3930,
     3939, 3942, 3944, 3946, 3948, 3952, 3950, 3962, 3954, 3959,
     3967, 3974, 3986, 3969, 3976, 3983, 3999, 4002, 4004, 4006,
     4008, 4010, 4012, 4014, 4017, 4020, 4022, 4027, 4029, 4032,
     4034, 4036, 4039, 4043, 4049, 4051, 4054, 4060, 4062, 4064,
     4069, 4073, 4075, 4078, 4082, 4087, 4089, 4091, 4093, 4095,
     4100, 4102, 4104, 4108, 4117, 4119, 4121, 4126, 4132, 4134,
     4138, 4140, 4145, 4147, 4149, 4153, 4151, 4155, 4157, 4163,
     4165, 4171, 4177, 4179, 4181, 4185, 4187, 4189, 4191, 4193,
     4195, 4198, 4203, 4205, 4209, 4211, 4215, 4213, 4217, 4220,

     4226, 4228, 4230, 4236, 4243, 4245, 4249, 4251, 4254, 4256,
     4260, 4263, 4265, 4268, 4272, 4274, 4276, 4286, 4288, 4292,
     4294, 4298, 4304, 4307, 4309, 4314, 4311, 4317, 4322, 4325,
     4332, 4334, 4336, 4339, 4342, 4344, 4346, 4348, 4350, 4356,
     4360, 4362, 4364, 4369, 4371, 4373, 4379, 4382, 4386, 4384,
     4392, 4399, 4401, 4404, 4407, 4412, 4414, 4417, 4421, 4423,
     4428, 4431, 4434, 4436, 4444, 4438, 4446, 4449, 4452, 4455,
     4457, 4460, 4463, 4470, 4473, 4477, 4479, 4481, 4483, 4485,
     4488, 4490, 4492, 4497, 4499, 4501, 4506, 4503, 4514, 4516,
     4518, 4522, 4524, 4527, 4529, 4532, 4534, 4542, 4536, 4544,

     4549, 4553, 4556, 4561, 4558, 4565, 4567, 4572, 4575, 4577,
     4579, 4584, 4588, 4581, 4590, 4592, 4612, 4595, 4622, 4599,
     4608, 4624, 4630, 4632, 4634, 4636, 4638, 4640, 4642, 4644,
     4646, 4648, 4652, 4655, 4658, 4661, 4663, 4668, 4670, 4673,
     4675, 4682, 4684, 4688, 4690, 4692, 4695, 4698, 4700, 4703,
     4705, 4707, 4711, 4714, 4716, 4721, 4723, 4727, 4733, 4735,
     4737, 4742, 4746, 4748, 4752, 4758, 4762, 4766, 4777, 4779,
     4764, 4789, 4792, 4797, 4799, 4802, 4804, 4806, 4808, 4810,
     4812, 4814, 4816, 4819, 4825, 4830, 4832, 4837, 4839, 4857,
     4848, 4850, 4862, 4864, 4866, 4874, 4876, 4878, 4880, 4882,

     4884, 4888, 4890, 4896, 4898, 4902, 4904, 4912, 4906, 4909,
     4922, 4924, 4927, 4929, 4931, 4933, 4937, 4935, 4939, 4942,
     4946, 4944, 4952, 4950, 4954, 4956, 4958, 4963, 4967, 4974,
     4976, 4978, 4981, 4989, 4992, 4996, 5000, 5003, 5005, 5007,
     5009, 5011, 5013, 5015, 5017, 5019, 5021, 5028, 5030, 5035,
     5032, 5037, 5040, 5043, 5045, 5050, 5047, 5052, 5055, 5057,
     5059, 5061, 5067, 5075, 5079, 5081, 5083, 5088, 5090, 5092,
     5094, 5098, 5101, 5103, 5106, 5114, 5116, 5118, 5120, 5123,
     5127, 5129, 5131, 5135, 5138, 5141, 5143, 5147, 5145, 5149,
     5156, 5161, 5168, 5163, 5177, 5179, 5182, 5184, 5186, 5190,

     5197, 5201, 5208, 5212, 5215, 5219, 5223, 5225, 5227, 5229,
     5231, 5233, 5235, 5237, 5240, 5243, 5249, 5251, 5253, 5255,
     5257, 5260, 5262, 5272, 5277, 5279, 5281, 5284, 5289, 5291,
     5294, 5298, 5300, 5302, 5306, 5304, 5308, 5318, 5311, 5313,
     5320, 5322, 5326, 5329, 5337, 5340, 5342, 5347, 5349, 5355,
     5357, 5359, 5364, 5366, 5368, 5375, 5377, 5379, 5381, 5384,
     5386, 5388, 5390, 5392, 5394, 5396, 5403, 5401, 5405, 5408,
     5410, 5416, 5418, 5427, 5429, 5431, 5435, 5437, 5439, 5444,
     5441, 5447, 5449, 5454, 5456, 5458, 5462, 5466, 5474, 5476,
     5478, 5480, 5488, 5490, 5492, 5494, 5497, 5500, 5502, 5504,

     5506, 5508, 5510, 5514, 5516, 5522, 5528, 5530, 5551, 5540,
     5555, 5533, 5557, 5561, 5563, 5565, 5567, 5570, 5573, 5575,
     5577, 5579, 5583, 5590, 5593, 5597, 5599, 5603, 5606, 5608,
     5613, 5610, 5615, 5617, 5620, 5625, 5634, 5636, 5638, 5641,
     5649, 5651, 5653, 5657, 5659, 5661, 5665, 5667, 5669, 5675,
     5677, 5680, 5682, 5684, 5686, 5688, 5690, 5692, 5694, 5697,
     5705, 5708, 5719, 5723, 5726, 5731, 5734, 5736, 5738, 5740,
     5742, 5744, 5746, 5748, 5754, 5757, 5759, 5763, 5765, 5767,
     5769, 5771, 5779, 5781, 5783, 5791, 5798, 5787, 5795, 5802,
     5804, 5806, 5809, 5814, 5819, 5821, 5823, 5827, 5829, 5831,

     5833, 5837, 5841, 5844, 5849, 5853, 5855, 5859, 5861, 5863,
     5865, 5868, 5875, 5877, 5881, 5884, 5886, 5892, 5894, 5896,
     5900, 5904, 5906, 5908, 5911, 5916, 5920, 5922, 5924, 5928,
     5937, 5942, 5946, 5948, 5950, 5952, 5957, 5959, 5961, 5964,
     5967, 5969, 5973, 5979, 5975, 5984, 5989, 5992, 5994, 5997,
     6002, 6006, 6008, 6011, 6013, 6015, 6017, 6020, 6022, 6025,
     6027, 6029, 6033, 6038, 6041, 6044, 6047, 6051, 6053, 6055,
     6057, 6060, 6062, 6066, 6072, 6074, 6081, 6083, 6085, 6087,
     6091, 6093, 6097, 6099, 6101, 6103, 6105, 6111, 6107, 6114,
     6118, 6123, 6125, 6140, 6142, 6144, 6146, 6148, 6150, 6156,

     6158, 6160, 6162, 6164, 6168, 6170, 6174, 6176, 6179, 6181,
     6185, 6188, 6190, 6192, 6195, 6197, 6199, 6209, 6202, 6204,
     6214, 6216, 6227, 6229, 6234, 6236, 6240, 6242, 6246, 6248,
     6251, 6257, 6259, 6263, 6265, 6267, 6270, 6275, 6285, 6287,
     6289, 6296, 6298, 6300, 6302, 6304, 6307, 6311, 6309, 6313,
     6316, 6320, 6322, 6324, 6326, 6328, 6333, 6338, 6342, 6351,
     6344, 6354, 6359, 6362, 6356, 6364, 6370, 6366, 6376, 6378,
     6381, 6388, 6384, 6391, 6394, 6399, 6402, 6406, 6408, 6410,
     6412, 6414, 6416, 6419, 6422, 6424, 6432, 6426, 6429, 6436,
     6439, 6442, 6448, 6462, 6466, 6468, 6470, 6472, 6474, 6476,

     6479, 6481, 6483, 6485, 6488, 6491, 6498, 6500, 6503, 6508,
     6510, 6513, 6516, 6518, 6520, 6522, 6524, 6526, 6530, 6532,
     6535, 6540, 6543, 6545, 6552, 6555, 6565, 6567, 6570, 6572,
     6574, 6576, 6578, 6580, 6584, 6586, 6590, 6594, 6596, 6598,
     6600, 6607, 6609, 6612, 6617, 6620, 6622, 6626, 6636, 6638,
     6641, 6643, 6645, 6647, 6649, 6651, 6653, 6657, 6659, 6661,
     6663, 6665, 6670, 6672, 6674, 6677, 6686, 6689, 6693, 6695,
     6698, 6700, 6702, 6707, 6709, 6711, 6718, 6721, 6723, 6725,
     6728, 6730, 6732, 6736, 6739, 6741, 6743, 6745, 6747, 6750,
     6759, 6761, 6763, 6765, 6767, 6772, 6779, 6775, 6781, 6783,

     6785, 6788, 6790, 6869, 6834,   75, 6841, 6846, 6850, 6853,
     6856, 6862
    } ;

static yyconst short int yy_def[2013] =
    {   0,
     2004,    1, 2004, 2004, 2004, 2004, 2004, 2005, 2004, 2004,
     2004, 2006, 2004, 2006, 2007, 2008, 2008, 2004, 2004, 2004,
     2004, 2004, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,   17,
     2004, 2004, 2004, 2004, 2005, 2004, 2006, 2004, 2004, 2009,
     2010, 2009,   17, 2008,   17, 2010, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008,   40, 2008, 2011, 2009, 2010, 2010, 2010, 2007,

       55, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2010, 2008, 2008, 2008, 2011, 2012, 2012,
       99, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,  188,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,  154,
     2008, 2008, 2008,  160, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008,    0, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004
    } ;

static yyconst short int yy_nxt[6927] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,    4,   15,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   27,   27,   27,
       27,   33,   34,   35,   27,   36,   37,   38,   39,   40,
       27,   27,   27,   27,   41,   42,   43,   48,   56,   52,
       56,   52,   49,   51,   52,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   56,   52,   56,   52,   56,   52,
       47,   56,   52,   56,   52,   56,   52, 2004,   56,   52,
       56,   52, 2004,   65,   57,  159,   58,   56,   52,   73,

       56,   52,  106,   55,   51,   52,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   59,   61,   62,   92,   63,
      159,   60,   56,   52,   56,   52,  100,   64,   66,   52,
       56,   52,   56,   52,   95,   56,   52,   56,   52,  154,
       56,   52,   46,   56,   52,   56,   52,   67,   70,   44,
       56,   52,   74,   68,   69,   75,   46,   80,   79,   56,
       52,   56,   52,   76,   81,   71,   72,   82,  102,   77,
       78,   83,   56,   52,   54,  104,   84,   56,   52,  103,
      105,  108,   56,   52,   56,   52,   56,   52,  107,   56,
       52,   44,   56,   52,   85, 2004,   86,  109,   87,   56,

       52,   56,   52,   56,   52,  160,  112,  160,   88, 2004,
      110,   89,   90,   91,   56,  111,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  116, 2004,  114,  115, 2004,
      117,  113, 2004,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52, 2004,   56,   52, 2004,   94,
       97,   97,   97,   97,   97,   97,   97,   97,   97,  118,
      125, 2004,  153,   56,   52,  119,   56,   52,  126,   99,
       56,  145,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  120,  121,   56,   52, 2004,  101,  101,  101,  101,
      101,  101,  101,  130,   56,   52,  131, 2004,  122,  127,

       56,   52,  123,  124,   56,   52,   56,   52,   56,   52,
       56,   52, 2004,   56,   52,  128, 2004,  134,   56,   52,
     2004,  129, 2004,  132, 2004,  138,  139, 2004,  136,  135,
      140, 2004,  133,   56,   52,   56,   52,  141,  142, 2004,
      143,   56,   52,  137,   56,   52,   56,   52,   56,   52,
      146,  155, 2004,   56,   52,   56,   52,  150,  144,   56,
       52,  148, 2004,  151, 2004,   56,   52,  156, 2004,  165,
      147,  162, 2004,  157,  172, 2004,  152,   56,   52,  149,
       97,   97,   97,   97,   97,   97,   97,   97,   97,  163,
      164,   56,   52,   56,   52,   56,   52,   56,   52,   99,

      160,  191,  160,   56,   52,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  167, 2004,  168,  169,   56,   52,
      170,  175,   56,   52,   56,   52,  166,  173,  171, 2004,
      174,   56,   52,   56,   52,   56,   52, 2004,  176, 2004,
       56,   52,   56,   52, 2004,  178,   56,   52,   56,   52,
      177,  181, 2004,   56,   52,   56,   52,   56,   52, 2004,
      179,  182, 2004,   56,   52,   56,   52, 2004,  180,  183,
      185,  187,  194,  188,   56,   52,   56,   52,  189,  190,
     2004,  184, 2004,  186,   56,   52,   56,   52,  192,   56,
       52,  193,   56,   52,   56,   52, 2004,  196,   56,   52,

       56,   52,   56,   52,  197,   56,   52, 2004,  195, 2004,
       56,   52, 2004,  200,  201,   56,   52,   56,   52,   56,
       52,  199, 2004,  198, 2004,  205, 2004,  206,  202,  207,
      208,   56,   52,  212, 2004,  211,  203,   56,   52,  204,
       56,   52,   56,   52, 2004,  209,  210,  213,   56,   52,
      214,   56,   52, 2004,   56,   52,  217,   56,   52,  215,
       56,   52, 2004,   56,   52,   56,   52,   56,   52,  219,
      221, 2004,  218,  216,   56,   52,  222,  223,   56,   52,
      220, 2004,  226,   56,   52, 2004,  231, 2004,   56,   52,
       56,   52,  224, 2004,  228,  233,  225,  227, 2004,  229,

      230,  230,  230,  230,  230,  230,  230,  230,  230,   56,
       52, 2004,  232,  236,   56,   52,   56,   52,  235,   56,
       52,   56,   52, 2004,  237,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52, 2004,   56,   52,  238,   56,
       52, 2004,  243, 2004,  239,  245,   56,   52,  247,  240,
      242, 2004,  241,  244,  249, 2004,  250,  251, 2004,  246,
       56,   52,   56,   52,   56,   52, 2004,  252, 2004,   56,
       52, 2004,  248, 2004,   56,   52, 2004,   56,   52,   56,
       52,   56,   52,  254,   56,   52, 2004,  256,  255,  257,
       56,   52,  258,  261,  253,   56,   52,   56,   52,  259,

     2004,  260,  262, 2004,  263, 2004,  288,   56,   52, 2004,
      273, 2004,  274,   56,   52,   56,   52,  264,   56,   52,
      275, 2004,  276,   56,   52,  277, 2004,  278,  290, 2004,
      279,  289,   56,   52,   56,   52,  265,  266,  267,  268,
       56,   52,   56,   52,  291, 2004,  292, 2004,  269, 2004,
      270,   56,   52,  271,  272,  280,  281,  282, 2004,  283,
     2004,  294,  296,  297,   56,   52,  293,  284, 2004,  285,
       56,   52,  286,  287,   54, 2004,  295,   56,   52,   56,
       52, 2004,  298,   56,   52,   56,   52,   56,   52,   56,
       52, 2004,   56,   52,   56,   52,  300,   56,   52, 2004,

      301,   56,   52,   56,   52,   56,   52,   56,   52,  299,
      306,  302,  305,  308,  309, 2004,  303,  311,  312, 2004,
      313,  307,  304,  317,   56,   52,   56,   52,  310, 2004,
       56,   52, 2004,  314, 2004,  316,  315,   56,   52,   56,
       52, 2004,  318,   56,   52,   56,   52,   56,   52, 2004,
       56,   52,   56,   52,  333,   56,   52, 2004,  338,  326,
      319,  320,  327,  321,  328,  329,  330, 2004,  337, 2004,
      334,  322,  323,   56,   52,  324,   56,   52,  325,   56,
       52,  331,  335,  332,   56,   52,  336,   56,   52, 2004,
      339,   56,   52,   56,   52, 2004,  340,   56,   52,   56,

       52,   56,   52, 2004,   56,   52,   56,   52,   56,   52,
      342,  346,   56,   52,  341,  343,  348,   56,   52,   56,
       52,  344, 2004,   56,   52, 2004,  347,  345,   56,   52,
       56,   52, 2004,  349,  350,   56,   52, 2004,  352,  353,
       56,   52,  351,  354,  356,  355,   56,   52,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
       56,   52,  358, 2004,  357, 2004,   56,   52,  359,   56,
       52,  364, 2004,  365, 2004,  367,  360,  361, 2004,  368,
       56,   52,   56,   52, 2004,  362,  371, 2004,  363,   56,
       52,  370, 2004,  366,  369, 2004,   56,   52,   56,   52,

       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
       56,   52,  373, 2004,   56,   52,  372,   56,   52,  387,
       56,   52, 2004,  376,   56,   52,  377,  379, 2004,  374,
      375,  378,   56,   52,  385,  388, 2004,  381,  386,  382,
       56,   52,  384,  383,  380,   56,   52, 2004,  389,  391,
      392,   56,   52,   56,   52,  390,   56,   52,   56,   52,
       56,   52, 2004,  394,  393,  395,   56,   52,   56,   52,
     2004,   56,   52,   56,   52,   56,   52, 2004,  398,  401,
      396,  399, 2004,   56,   52, 2004,  397,  400,  406, 2004,
      407,  402,   56,   52,  408,   56,   52,  403, 2004,  404,

      410,   56,   52,  405,   56,   52,  409,   56,   52,   56,
       52,  411,   56,   52,   56,   52,   56,   52,   56,   52,
     2004,   56,   52, 2004,  413,  412,   56,   52,   56,   52,
       56,   52, 2004,  417, 2004,  420,   56,   52, 2004,  414,
     2004,  415,  421,  416,   56,   52, 2004,  419,  418,   56,
       52,   56,   52,   56,   52, 2004,   56,   52, 2004,  423,
      422, 2004,   56,   52,   56,   52,  425,   56,   52, 2004,
      424, 2004,  427,  430,   56,   52, 2004,  426,  431,   56,
       52, 2004,  428,   56,   52,   56,   52,   56,   52,  432,
     2004,  434, 2004,  429,   56,   52,  435,  433,   56,   52,

     2004,  437, 2004,   56,   52, 2004,   56,   52,   56,   52,
       56,   52,   56,   52,  447,  436,   56,   52, 2004,   56,
       52,  446,   56,   52,   56,   52,  448,  452,  450,   56,
       52,   56,   52,  438,  451,  449,   56,   52,  439,  440,
      456,  453,  455,  462,  441,  442,  443,  454,  444,  445,
       56,   52,  459, 2004,  458, 2004,  457,  460,   56,   52,
      465,  461,   56,   52,   56,   52,   56,   52, 2004,   56,
       52,  463,   56,   52,   56,   52,   56,   52, 2004,  464,
     2004,   56,   52, 2004,  466,  467,   56,   52,  469,  470,
      472,   56,   52,   56,   52,   56,   52,  474,   56,   52,

      468,  471,  475, 2004,  473,   56,   52,   56,   52,   56,
       52, 2004,   56,   52,  477,  481,  476,   56,   52,   56,
       52,  479,   56,   52,   56,   52,   56,   52,  478,  484,
      483,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52, 2004,  480,  482,  488,  489, 2004,  487, 2004,  491,
     2004,  485, 2004,  493,  486,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52,  490,  492,   56,   52,   56,
       52,   56,   52,   56,   52, 2004,  494, 2004,  495,   56,
       52,  497, 2004,  496,   56,   52,   56,   52,   56,   52,
      501,   56,   52,   56,   52, 2004,  499, 2004,  498,   56,

       52,   56,   52,  500,  503,   56,   52,  502,   56,   52,
     2004,  507,  508,  504,  509,   56,   52, 2004,  505,   56,
       52,  506,  511,   56,   52,   56,   52,   56,   52,  510,
      513,   56,   52,  512,   56,   52,   56,   52,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52,  516, 2004,
      518,  514,  519,  515,   56,   52,  522,  520,  517,  523,
       56,   52, 2004,  526, 2004,   56,   52,   56,   52,  524,
       56,   52,   56,   52,  521, 2004,  525,   56,   52,   56,
       52,   56,   52,   56,   52,  528,  530,  527,  532,   56,
       52,  531,   56,   52,   56,   52,   56,   52,  534, 2004,

      533,  529,   56,   52,   56,   52,  537,  535,   56,   52,
     2004,   56,   52,  536,   56,   52,   56,   52, 2004,  540,
       56,   52, 2004,  538, 2004,  541, 2004,  539,   56,   52,
       56,   52,  542, 2004,   56,   52,   56,   52, 2004,  543,
      546, 2004,  545, 2004,  544,   56,   52,   56,   52, 2004,
      547,  548, 2004,  550,  549,  552,   56,   52,   56,   52,
       56,   52,   56,   52, 2004,  551,   56,   52,   56,   52,
      553,   56,   52,   56,   52,   56,   52,  555,   56,   52,
     2004,  554,   56,   52,  557, 2004,   56,   52, 2004,  561,
      556, 2004,  562,  560,  558,   56,   52,   56,   52, 2004,

      559,  565,   56,   52,  566,  567, 2004,  563,   56,   52,
       56,   52,   56,   52,  564,  568, 2004,   56,   52,  571,
       56,   52, 2004,   56,   52,  569,  572,   56,   52,  575,
      570, 2004,  576, 2004,  574, 2004,   56,   52, 2004,  577,
      581,   56,   52,  573,   56,   52,  578,  579,  580,   56,
       52, 2004,  582,  583, 2004,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52, 2004,   56,   52,
       56,   52,  584,   56,   52,  585,  588,  589,   56,   52,
      590,   56,   52,   56,   52,  586,  587,   56,   52, 2004,
      591,  597, 2004,  595,   56,   52,   56,   52,  592,   56,

       52,  593,  594,   56,   52,  599,  596,   56,   52,  598,
       56,   52,   56,   52,  600,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52,  609,  608,  610, 2004,  611,
     2004,  614,  601,  602,  603,  604,  605, 2004,  612,  615,
      616,   56,   52,  618,  606,   56,   52,  613,   56,   52,
      607,  617, 2004,  620,   56,   52,   56,   52,   56,   52,
       56,   52,   56,   52,  621, 2004,  619, 2004,  622,   56,
       52,   56,   52,  623,   56,   52,  625,   56,   52, 2004,
       56,   52,   56,   52,   56,   52,  624,  629,   56,   52,
      626,   56,   52,  627,  628,   56,   52,   56,   52,  639,

       56,   52,   56,   52, 2004,  638, 2004,  643,  640,  642,
      647,  641, 2004,  630,  631,   56,   52,  632,  645,  646,
      644,   56,   52, 2004,  633,   56,   52,  634,   56,   52,
      635,  636,  637,   56,   52,   56,   52, 2004,  648, 2004,
      655,   56,   52,   56,   52,  649,  650,  651,  652, 2004,
      656,   56,   52,   56,   52,   56,   52,  653,  657, 2004,
      654, 2004,  659, 2004,  660, 2004,  658,   56,   52,   56,
       52, 2004,  663,   56,   52,   56,   52,   56,   52, 2004,
      662,   56,   52,  661,  664, 2004,   56,   52,   56,   52,
       56,   52,  668,   56,   52,   56,   52,  669,   56,   52,

     2004,  670,  667,  671,  665,   56,   52, 2004,  666,   56,
       52,   56,   52,   56,   52,   56,   52,  675, 2004,  672,
      673,   56,   52, 2004,  674,   56,   52,   56,   52, 2004,
       56,   52,  676, 2004,  677,  685,  679, 2004,  682,  678,
      681,   56,   52, 2004,  683, 2004,  684,   56,   52, 2004,
       56,   52,   56,   52, 2004,  680,   56,   52,  686,   56,
       52,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52, 2004,   56,   52,   56,   52,  687,  688,   56,   52,
      692, 2004,   56,   52,  694,  695,   56,   52,  689, 2004,
      690,   56,   52,  696,  693,  691, 2004,  697,  699,  700,

       56,   52,  698,  701,   56,   52,   56,   52,   56,   52,
      702,  703,   56,   52,   56,   52,  704,   56,   52,   56,
       52, 2004,   56,   52, 2004,   56,   52,  707,  705,   56,
       52,  709,  706,   56,   52,   56,   52,  710,  711,  713,
     2004,  708,   56,   52, 2004,   56,   52,   56,   52, 2004,
       56,   52,   56,   52, 2004,  712,  714,   56,   52,  717,
       56,   52,  716,   56,   52,  715,  718,  720,  719,   56,
       52,   56,   52,   56,   52,   56,   52, 2004,  722, 2004,
      721, 2004,  724,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52, 2004,   56,   52, 2004,  723,   56,   52,

       56,   52, 2004,   56,   52, 2004,  725, 2004,  732, 2004,
      726,  727,  730,  729,  728,  734,  733,   56,   52,   56,
       52,   56,   52,  731,  736,   56,   52,   56,   52, 2004,
       56,   52,   56,   52, 2004,  735,   56,   52,   56,   52,
       56,   52,   56,   52,  738,  737,  739,  742,  740,   56,
       52, 2004,  741, 2004,   56,   52,   56,   52,   56,   52,
       56,   52,   56,   52,   56,   52,  744,  747, 2004,  743,
      746,  749,   56,   52,   56,   52,   56,   52,  745,  750,
     2004,  754, 2004,  748,   56,   52,   56,   52,   56,   52,
      752,   56,   52,  751,  753,   56,   52,   56,   52, 2004,

       56,   52,   56,   52,  755, 2004,  756,   56,   52,  760,
       56,   52, 2004,  757, 2004,  759, 2004,  763,   56,   52,
      758,   56,   52,   56,   52,  764, 2004,  761,   56,   52,
      762,  765, 2004,  766, 2004,  769,  767, 2004,  768,   56,
       52,   56,   52,  770,   56,   52, 2004,  772,   56,   52,
     2004,   56,   52,   56,   52,  771,   56,   52,   56,   52,
      773,   56,   52, 2004,   56,   52, 2004,  777,   56,   52,
      774,   56,   52,   56,   52, 2004,  775, 2004,  782,   56,
       52,  776,   56,   52,  778,  779,   56,   52,   56,   52,
      780,   56,   52,  781,   56,   52,  787, 2004,  783,  784,

       56,   52,  785,  789,  786,   56,   52,  790, 2004,  788,
     2004,  793,   56,   52,   56,   52,   56,   52,   56,   52,
       56,   52, 2004,  791,   56,   52, 2004,  792,   56,   52,
     2004,  794, 2004,  798,   56,   52,  795,   56,   52,   56,
       52, 2004,  797,  796, 2004,  801,   56,   52, 2004,  799,
       56,   52, 2004,  803, 2004,  804,  800, 2004,  802,   56,
       52, 2004,   56,   52,  806,   56,   52,   56,   52,   56,
       52,  808, 2004,  805,   56,   52, 2004,  809,  807,  810,
     2004,   56,   52,   56,   52, 2004,  811,   56,   52, 2004,
       56,   52,   56,   52, 2004,  812,   56,   52, 2004,   56,

       52,   56,   52,   56,   52,  813,  815,   56,   52, 2004,
      814,  818, 2004,  816,   56,   52,   56,   52,  817, 2004,
      821,   56,   52,  819,   56,   52,  820,  826,  822,  823,
       56,   52,   56,   52,   56,   52, 2004,  824, 2004,  825,
       56,   52,   56,   52,   56,   52,   56,   52,  827,   56,
       52,   56,   52,   56,   52,   56,   52,  829,  828,  831,
       56,   52,   56,   52,   56,   52, 2004,  833, 2004,  830,
     2004,  834,  832,   56,   52,  837,   56,   52,   56,   52,
      835,  840,   56,   52,   56,   52, 2004,  836,   56,   52,
      841,   56,   52, 2004,  838,   56,   52,   56,   52,  839,

       56,   52, 2004,  844, 2004,   56,   52,   56,   52,  846,
       56,   52,  842, 2004,  843,   56,   52,   56,   52,   56,
       52,  845,  847, 2004,  859,  851,  848,  849,  855,   56,
       52,  856,   56,   52,   56,   52,  850,  852,  858, 2004,
      853, 2004,  854,   56,   52,   56,   52,   56,   52,   56,
       52,  857,   56,   52, 2004,  862,   56,   52,   56,   52,
       56,   52,  864,  860,   56,   52,  861,   56,   52,   56,
       52, 2004,  867, 2004,  863,   56,   52,  870, 2004,   56,
       52, 2004,  869,  866, 2004,  865,   56,   52,  872, 2004,
      868,   56,   52,   56,   52, 2004,  874,  873,   56,   52,

      871,  875,   56,   52,   56,   52,   56,   52,   56,   52,
       56,   52, 2004,  877, 2004,  878, 2004,  876,   56,   52,
       56,   52, 2004,  881, 2004,   56,   52,   56,   52,  882,
     2004,  879,   56,   52,  880,   56,   52,   56,   52,   56,
       52,   56,   52, 2004,  883,   56,   52,  884,  887,   56,
       52,   56,   52,   56,   52,   56,   52, 2004,  885,  886,
       56,   52,  888,   56,   52,   56,   52,  891,  895, 2004,
      889, 2004,  897,  890, 2004,  892,  893, 2004,  898,   56,
       52,   56,   52,  894,   56,   52, 2004,  896,   56,   52,
     2004,  899,   56,   52,   56,   52,   56,   52, 2004,  900,

       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
       56,   52,  906,  903, 2004,  901,   56,   52,  902, 2004,
      905,   56,   52,  904, 2004,  910, 2004,   56,   52,  911,
     2004,  907, 2004,  913,   56,   52,  908,  909,   56,   52,
      912,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52, 2004,  914,  915,  918,  916,
     2004,  920,  919,  917,   56,   52,   56,   52,   56,   52,
       56,   52,   56,   52,   56,   52,  923,  922, 2004,  921,
     2004,   56,   52,  925,  924,   56,   52,   56,   52,  927,
      928,   56,   52,   56,   52,   56,   52,   56,   52, 2004,

      926, 2004,  932, 2004,  929,   56,   52, 2004,  930,  931,
      934, 2004,  933, 2004,  939,   56,   52, 2004,  938,   56,
       52,   56,   52,  936, 2004,  937,  940,  935,   56,   52,
       56,   52, 2004,   56,   52,   56,   52,   56,   52,   56,
       52, 2004,   56,   52,   56,   52, 2004,   56,   52,  941,
      947, 2004,  944,   56,   52,  942,  943,   56,   52,   56,
       52,  953,   56,   52,  945,  949, 2004,  946,   56,   52,
      948,  950,  952,  954,  951,   56,   52,   56,   52,  957,
       56,   52, 2004,  955,   56,   52,   56,   52,  956, 2004,
      958,   56,   52, 2004,  961,   56,   52, 2004,  959, 2004,

      960,   56,   52,   56,   52,   56,   52,   56,   52,  962,
       56,   52,   56,   52,  963,   56,   52,  964, 2004,  965,
     2004,   56,   52,   56,   52, 2004,  966,  971,  968,   56,
       52,   56,   52,   56,   52,   56,   52,  967,  974,  969,
       56,   52,  972,   56,   52, 2004,  976,  970,   56,   52,
      973,   56,   52,   56,   52,   56,   52,   56,   52, 2004,
      979,   56,   52,  975, 2004,  978, 2004,   56,   52, 2004,
      977,   56,   52,   56,   52,   56,   52,   56,   52, 2004,
      983, 2004,  980,   56,   52,   56,   52,  981,   56,   52,
      987,  984,  985,  982,   56,   52,   56,   52,   56,   52,

     2004,  992,  986,   56,   52,  991,  988,   56,   52,   56,
       52,   56,   52,  989,   56,   52,   56,   52, 2004,  990,
       56,   52,   56,   52,   56,   52,  993, 2004, 1001,   56,
       52,   56,   52,  996, 2004,  994, 2004,  995,   56,   52,
       56,   52,   56,   52,   56,   52, 2004,  999, 2004,  998,
     2004,  997,   56,   52,   56,   52,   56,   52, 1003, 1004,
     2004, 1000,   56,   52, 1002,   56,   52, 1006,   56,   52,
     2004, 1011, 1012, 1013, 1014, 1005,   56,   52,   56,   52,
     1007,   56,   52, 2004, 1008,   56,   52, 1009,   56,   52,
     1010,   56,   52,   56,   52, 1016, 2004, 1015, 2004,   56,

       52,   56,   52, 1018, 2004, 1017,   56,   52, 1020, 1021,
     1022, 1023, 1024,   56,   52, 2004, 1025, 1026, 1027, 1028,
     1019,   56,   52, 1033,   56,   52, 2004, 1029, 2004, 1031,
     1032,   56,   52,   56,   52,   56,   52,   56,   52, 2004,
     1030,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52, 1034,   56,   52,   56,   52,
       56,   52, 1037, 2004, 1036, 1035,   56,   52,   56,   52,
       56,   52, 1040, 1039, 1041, 1043, 1038,   56,   52,   56,
       52, 1042,   56,   52,   56,   52, 2004, 1044,   56,   52,
       56,   52,   56,   52,   56,   52, 1045,   56,   52,   56,

       52, 1049,   56,   52, 2004, 1048,   56,   52, 2004, 1047,
     2004, 1051, 2004, 1046,   56,   52,   56,   52, 1054, 1056,
     1050, 1052,   56,   52,   56,   52, 2004, 1057, 1055, 2004,
     1053,   56,   52,   56,   52, 2004, 1059, 2004,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52, 1058,   56,
       52, 1060,   56,   52,   56,   52, 2004, 1065, 1061, 1064,
     2004, 1063, 2004, 1062, 2004, 1067, 1066,   56,   52, 1069,
     1068, 1071,   56,   52,   56,   52, 2004, 1070,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
     2004, 1073,   56,   52, 2004, 1075,   56,   52, 1072, 2004,

       56,   52,   56,   52, 2004,   56,   52, 1079, 2004, 1074,
       56,   52, 2004, 1077, 2004, 1080,   56,   52, 1076, 1082,
     1083, 1078, 1084,   56,   52,   56,   52, 1081,   56,   52,
       56,   52, 1086, 1087,   56,   52, 1085,   56,   52, 2004,
     1089, 1088,   56,   52, 2004, 1091, 2004, 1093, 1090,   56,
       52,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52, 2004, 1092, 2004, 1095,   56,   52, 1096,
     2004, 1094,   56,   52,   56,   52, 1101,   56,   52, 1100,
       56,   52, 1097, 1103, 1099, 1098,   56,   52, 1102, 1104,
     1106, 1107,   56,   52,   56,   52, 1105, 1110,   56,   52,

       56,   52, 2004, 1112, 2004, 1108, 2004, 1109,   56,   52,
     2004, 1111,   56,   52, 2004, 1115,   56,   52,   56,   52,
       56,   52,   56,   52, 2004, 1114,   56,   52, 1113,   56,
       52,   56,   52, 1118, 1116, 1119, 2004, 1120,   56,   52,
     2004, 1121, 2004, 1117, 1124, 2004,   56,   52, 1122, 2004,
     1125,   56,   52,   56,   52, 2004, 1127, 2004, 1123,   56,
       52,   56,   52,   56,   52, 2004, 1126, 1128,   56,   52,
       56,   52,   56,   52, 1130,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52, 2004, 1129, 2004,
     1131, 1132, 1135,   56,   52,   56,   52, 2004, 1133, 2004,

       56,   52, 2004, 1134,   56,   52, 1138,   56,   52, 1137,
     2004, 1136, 1143, 1144, 2004, 1140,   56,   52, 2004, 1139,
       56,   52,   56,   52,   56,   52,   56,   52, 2004, 1141,
     1142, 2004,   56,   52,   56,   52,   56,   52, 1145,   56,
       52,   56,   52, 2004,   56,   52, 2004, 1149,   56,   52,
       56,   52, 1146,   56,   52, 2004, 1147, 1150, 1148, 2004,
     1152,   56,   52, 1151, 1155, 2004, 1153, 1154, 2004,   56,
       52,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52, 2004, 1156, 2004, 1159, 1157,   56,   52,
       56,   52, 1162,   56,   52,   56,   52, 1158, 1160, 1161,

       56,   52,   56,   52, 2004, 1164, 1169,   56,   52, 1163,
     2004, 1165,   56,   52, 1166, 2004, 1167, 1168,   56,   52,
       56,   52, 2004,   56,   52,   56,   52,   56,   52,   56,
       52, 2004, 1170, 1176, 2004, 1172,   56,   52,   56,   52,
       56,   52, 2004, 1171,   56,   52,   56,   52,   56,   52,
       56,   52, 2004, 1177,   56,   52, 1173, 1174, 1175, 1178,
       56,   52, 2004, 1179, 2004, 1183,   56,   52,   56,   52,
       56,   52,   56,   52, 1182,   56,   52, 1180,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52, 2004, 1181,
     1190, 2004, 1191,   56,   52, 2004,   56,   52,   56,   52,

       56,   52, 1184,   56,   52, 1185,   56,   52, 1186, 2004,
     1187, 2004, 1188, 1193, 2004, 1189,   56,   52,   56,   52,
     1196,   56,   52,   56,   52, 1194, 2004, 1198, 1192,   56,
       52,   56,   52,   56,   52, 2004, 1195,   56,   52,   56,
       52,   56,   52,   56,   52, 2004, 1197,   56,   52, 2004,
     1201, 2004, 1199,   56,   52,   56,   52,   56,   52, 2004,
     1204,   56,   52, 2004, 1206, 1200, 2004, 1202,   56,   52,
     2004,   56,   52, 1203,   56,   52, 2004, 1205, 1209,   56,
       52,   56,   52, 1207,   56,   52, 2004, 1208, 1210,   56,
       52,   56,   52,   56,   52,   56,   52,   56,   52,   56,

       52,   56,   52,   56,   52, 1212,   56,   52, 1211,   56,
       52,   56,   52,   56,   52, 2004, 1215,   56,   52,   56,
       52, 1213, 1214, 1219,   56,   52, 2004, 1220,   56,   52,
       56,   52, 1218, 2004, 1216, 1217,   56,   52,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52, 2004, 1223,
     2004,   56,   52, 1221,   56,   52, 1222,   56,   52,   56,
       52, 1225, 1224, 1226,   56,   52,   56,   52,   56,   52,
     2004, 1232, 1228,   56,   52, 1229, 1231, 1227, 1233,   56,
       52,   56,   52, 1230, 2004, 1235, 1236,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52, 1234, 1240,   56,

       52, 1238,   56,   52, 1237, 2004, 1241, 2004, 1243, 2004,
     1242,   56,   52, 2004, 1244, 2004, 1239,   56,   52,   56,
       52,   56,   52, 1247,   56,   52,   56,   52, 2004, 1245,
     1246,   56,   52, 2004,   56,   52, 1248,   56,   52,   56,
       52,   56,   52, 1253, 1250, 2004, 1251, 1249, 2004, 1252,
       56,   52, 2004,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52, 1254, 1255, 1256,
       56,   52, 1261,   56,   52, 1258, 2004, 1257,   56,   52,
       56,   52, 1259, 1260, 1264,   56,   52,   56,   52, 1263,
     2004, 1262, 1266, 1265,   56,   52, 2004,   56,   52, 1267,

     1271, 1272, 1273, 1274, 1268, 2004, 1276, 2004, 1275, 1270,
       56,   52, 1269,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52, 1278,   56,   52,
     1277,   56,   52,   56,   52, 2004, 1280, 1281,   56,   52,
       56,   52, 2004,   56,   52,   56,   52,   56,   52, 1282,
       56,   52, 2004, 1279,   56,   52, 1286, 1283, 2004, 1284,
       56,   52,   56,   52, 1285,   56,   52, 2004, 1288, 1287,
     1291,   56,   52,   56,   52,   56,   52, 1289, 1290, 2004,
       56,   52, 2004, 1293,   56,   52,   56,   52, 2004,   56,
       52, 2004, 1294,   56,   52, 2004, 1292, 1296,   56,   52,

       56,   52,   56,   52,   56,   52,   56,   52, 2004, 1295,
     1299,   56,   52,   56,   52,   56,   52, 2004, 1297,   56,
       52, 2004, 1298, 1305, 1300, 1302, 1301, 1303,   56,   52,
       56,   52,   56,   52, 1309, 2004, 1306,   56,   52, 2004,
     1304, 2004, 1307,   56,   52,   56,   52, 1310, 1311,   56,
       52,   56,   52, 1308, 2004, 1312,   56,   52,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
     2004, 1320, 2004, 1313,   56,   52,   56,   52, 1317, 1315,
     1319, 2004,   56,   52, 2004, 1316, 2004, 1314,   56,   52,
       56,   52,   56,   52, 1318, 1321,   56,   52,   56,   52,

       56,   52,   56,   52,   56,   52,   56,   52, 1322,   56,
       52, 2004, 1323, 1324,   56,   52,   56,   52, 1325, 2004,
       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
     1326,   56,   52, 2004, 1327, 2004, 1328,   56,   52,   56,
       52,   56,   52, 2004, 1329, 1332, 1334,   56,   52, 1335,
     1333, 1330, 2004, 1331,   56,   52,   56,   52, 1336, 1338,
       56,   52,   56,   52, 2004,   56,   52,   56,   52, 2004,
     1339,   56,   52, 1337,   56,   52,   56,   52, 2004,   56,
       52, 2004, 1340,   56,   52,   56,   52,   56,   52, 1341,
     1344, 2004, 1342, 2004, 1343, 1345, 2004,   56,   52,   56,

       52, 2004, 1346,   56,   52,   56,   52, 2004, 1347,   56,
       52, 2004, 1348, 1349, 1352,   56,   52, 1350,   56,   52,
       56,   52,   56,   52, 1351,   56,   52, 1355,   56,   52,
     2004, 1353, 1356,   56,   52, 2004,   56,   52, 2004, 1354,
     1357, 2004, 1358,   56,   52,   56,   52,   56,   52, 1360,
       56,   52, 1359,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52, 2004, 1364, 1363, 2004,   56,   52, 1361,
     1362,   56,   52,   56,   52,   56,   52, 2004, 1368, 1366,
       56,   52,   56,   52,   56,   52, 2004, 1365, 2004, 1370,
       56,   52, 1367,   56,   52,   56,   52,   56,   52, 2004,

     1369, 1371, 1374,   56,   52, 2004, 1378, 1372, 1373, 1376,
       56,   52,   56,   52, 1375,   56,   52, 1377,   56,   52,
     1379, 1380, 1381,   56,   52,   56,   52, 1382,   56,   52,
     2004, 1383,   56,   52,   56,   52, 1386, 2004, 1384,   56,
       52, 1387,   56,   52, 1385,   56,   52,   56,   52,   56,
       52, 1390, 2004, 1388, 1389,   56,   52,   56,   52, 2004,
       56,   52, 1393,   56,   52, 2004,   56,   52,   56,   52,
     1391,   56,   52, 1392,   56,   52, 1398, 1399, 2004, 1396,
     1394,   56,   52, 1395,   56,   52, 1397, 1401,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52, 1400,   56,

       52,   56,   52,   56,   52, 1402, 2004, 1404,   56,   52,
       56,   52,   56,   52,   56,   52, 2004,   56,   52, 1406,
     1405, 1409, 1410, 1411, 1403,   56,   52,   56,   52,   56,
       52, 2004, 1407,   56,   52,   56,   52, 1412,   56,   52,
       56,   52, 2004,   56,   52,   56,   52,   56,   52, 1414,
     1415, 2004, 1408,   56,   52,   56,   52, 2004, 1416, 1413,
       56,   52, 1420, 2004,   56,   52, 1422,   56,   52,   56,
       52, 1418,   56,   52, 1417, 1419,   56,   52,   56,   52,
     2004, 1421, 1425,   56,   52, 1424,   56,   52,   56,   52,
       56,   52,   56,   52, 1423,   56,   52, 1427, 1426,   56,

       52,   56,   52,   56,   52, 1435,   56,   52, 1429, 1428,
       56,   52, 2004, 1434, 2004, 1431, 1433, 2004, 1432,   56,
       52, 2004, 1430,   56,   52, 1436, 1437, 1438, 1439, 1440,
     1441, 1442, 1443,   56,   52,   56,   52, 1444, 2004, 1445,
     1446,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52, 2004, 1448,   56,   52, 2004,   56,   52, 2004,   56,
       52, 1447,   56,   52,   56,   52, 1454, 1449, 1450,   56,
       52,   56,   52, 1452,   56,   52,   56,   52, 2004, 1453,
     1451, 1455, 1456,   56,   52,   56,   52, 2004, 1459,   56,

       52,   56,   52,   56,   52, 1458,   56,   52, 1457,   56,
       52,   56,   52, 2004,   56,   52,   56,   52,   56,   52,
     1460, 2004,   56,   52, 1461,   56,   52,   56,   52, 2004,
     1463, 1466,   56,   52,   56,   52, 2004, 1462,   56,   52,
     1464, 2004, 1465, 1468,   56,   52,   56,   52,   56,   52,
     1467, 1472, 1470,   56,   52, 2004, 1469,   56,   52,   56,
       52, 2004, 1471,   56,   52, 2004, 1475, 2004, 1473,   56,
       52, 2004, 1476,   56,   52,   56,   52,   56,   52, 1478,
     2004, 1483, 2004, 1484, 1474, 2004, 1481, 1477,   56,   52,
       56,   52, 1482, 2004, 1485, 1479, 1486, 2004, 1490, 1480,

       56,   52, 1487,   56,   52, 1488, 2004, 1489,   56,   52,
       56,   52, 2004,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52,   56,   52, 1493,
       56,   52, 2004, 1492, 1494, 2004,   56,   52, 1491, 1496,
     1495,   56,   52,   56,   52, 1505, 1506, 1507,   56,   52,
       56,   52, 2004, 1500, 2004, 1497, 2004, 1498, 1499,   56,
       52,   56,   52, 1501, 1503, 2004, 1502, 1510,   56,   52,
     1511, 1512, 1513,   56,   52,   56,   52,   56,   52, 1508,
     2004, 1504, 2004, 1509, 1514,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52, 1516, 1515,   56,

       52,   56,   52, 2004, 1517, 1520, 1519,   56,   52,   56,
       52, 1518, 2004,   56,   52,   56,   52,   56,   52, 1522,
       56,   52, 1525,   56,   52, 1523, 1521, 2004, 1529, 1524,
     1527, 2004, 1528,   56,   52,   56,   52, 1526,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
       56,   52, 2004,   56,   52,   56,   52,   56,   52, 1530,
     2004,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52, 1531, 1532, 1534,   56,   52, 1535, 2004,   56,   52,
     1533, 1536, 1537, 1539, 1542,   56,   52,   56,   52,   56,
       52, 1538,   56,   52, 2004, 1540, 2004, 1544, 1541, 1545,

       56,   52, 1543,   56,   52, 2004, 1547,   56,   52, 2004,
     1546,   56,   52, 1548,   56,   52,   56,   52,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
       56,   52,   56,   52, 2004, 1550, 1551, 1552, 1553,   56,
       52,   56,   52,   56,   52, 1554,   56,   52,   56,   52,
     1549,   56,   52, 2004,   56,   52,   56,   52,   56,   52,
     2004,   56,   52,   56,   52, 2004,   56,   52,   56,   52,
       56,   52,   56,   52, 2004, 1561, 2004, 1555,   56,   52,
     1556, 1557, 1560, 1559, 1558, 1562,   56,   52, 2004, 1566,
       56,   52,   56,   52,   56,   52, 2004, 1563, 1564,   56,

       52,   56,   52,   56,   52,   56,   52, 1567, 1565,   56,
       52, 1569,   56,   52,   56,   52, 2004,   56,   52, 2004,
     1568, 1575, 1571, 2004, 1572,   56,   52,   56,   52,   56,
       52,   56,   52, 1570,   56,   52, 2004, 1573,   56,   52,
       56,   52,   56,   52, 2004, 1574,   56,   52, 1576,   56,
       52, 2004,   56,   52,   56,   52,   56,   52,   56,   52,
       56,   52, 1578, 1589, 1590, 2004, 1577,   56,   52, 2004,
     1580, 1579,   56,   52,   56,   52, 1581, 1584, 1587,   56,
       52, 2004, 1582, 1585, 1586, 2004, 1583, 2004,   56,   52,
       56,   52, 1588,   56,   52,   56,   52,   56,   52, 2004,

     1594,   56,   52, 2004, 1591, 1592, 1593, 2004,   56,   52,
     1595, 1597,   56,   52, 2004, 1596, 1600, 2004, 1599,   56,
       52, 2004, 1602,   56,   52, 1598,   56,   52, 1601, 1603,
       56,   52, 2004, 1604,   56,   52,   56,   52,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
     1605,   56,   52, 2004,   56,   52, 2004, 1608, 1607, 1606,
       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
     2004,   56,   52,   56,   52, 2004, 1609, 1612, 2004, 1613,
     2004, 1610, 1611,   56,   52, 2004, 1616, 1615,   56,   52,
       56,   52,   56,   52, 1618,   56,   52, 2004, 1614, 1617,

       56,   52,   56,   52, 1619,   56,   52, 2004, 1620,   56,
       52,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52, 2004,   56,   52,   56,   52, 1621, 1623, 1622,   56,
       52,   56,   52,   56,   52, 2004, 1626,   56,   52, 1624,
       56,   52, 1630, 1629, 1627, 1625, 1628, 1632,   56,   52,
     1631,   56,   52,   56,   52, 1633, 2004, 1635,   56,   52,
       56,   52, 2004, 1634, 2004, 1640,   56,   52,   56,   52,
       56,   52, 2004, 1636, 1638,   56,   52,   56,   52,   56,
       52, 2004, 1637, 1641, 2004, 1642,   56,   52,   56,   52,
       56,   52,   56,   52, 1639,   56,   52,   56,   52,   56,

       52,   56,   52,   56,   52,   56,   52,   56,   52, 2004,
     1648, 1649,   56,   52,   56,   52,   56,   52, 1646,   56,
       52,   56,   52, 2004, 1650, 2004, 1643,   56,   52,   56,
       52, 1652, 1644, 1645, 1651, 1647, 2004, 1653,   56,   52,
       56,   52,   56,   52, 1654, 2004,   56,   52,   56,   52,
       56,   52,   56,   52, 2004,   56,   52, 1664,   56,   52,
       56,   52, 1656, 2004, 1655,   56,   52,   56,   52,   56,
       52, 2004, 1659,   56,   52, 1657, 2004,   56,   52, 2004,
     1658, 1660, 1661, 1663, 1662,   56,   52,   56,   52,   56,
       52,   56,   52, 1668, 2004, 1666, 2004, 1665, 1669,   56,

       52,   56,   52,   56,   52,   56,   52, 1667,   56,   52,
     2004,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52, 2004, 1672,   56,   52,   56,   52, 1670,
     2004, 1671, 1675,   56,   52, 2004, 1673, 2004, 1674,   56,
       52,   56,   52, 1676,   56,   52, 2004, 1682, 2004, 1677,
     2004,   56,   52, 1678, 2004, 1680, 2004, 1679, 1685, 1681,
     2004, 1684,   56,   52, 1686, 1687,   56,   52,   56,   52,
     1683, 1688,   56,   52,   56,   52,   56,   52,   56,   52,
     1690,   56,   52, 1689,   56,   52,   56,   52,   56,   52,
       56,   52, 2004, 1692,   56,   52, 2004, 1694, 1691, 1695,

     1696,   56,   52, 1693,   56,   52, 2004, 1698,   56,   52,
       56,   52, 2004, 1697,   56,   52, 2004,   56,   52,   56,
       52,   56,   52, 2004,   56,   52,   56,   52,   56,   52,
     1699,   56,   52, 1700, 2004, 1704,   56,   52, 2004, 1702,
     1703, 1701, 1705, 1706, 1707,   56,   52,   56,   52,   56,
       52, 1709,   56,   52, 2004, 1708, 2004, 1712, 2004, 1710,
       56,   52,   56,   52,   56,   52, 2004, 1711,   56,   52,
       56,   52,   56,   52, 2004, 1713,   56,   52,   56,   52,
       56,   52, 1714, 2004, 1715, 1716,   56,   52,   56,   52,
     2004,   56,   52,   56,   52,   56,   52,   56,   52,   56,

       52,   56,   52,   56,   52,   56,   52, 1717,   56,   52,
     2004, 1719, 1720, 2004, 1724, 1725,   56,   52, 1727,   56,
       52, 2004, 1718, 1721, 2004, 1722, 2004, 1723, 2004, 1729,
       56,   52, 2004, 1730,   56,   52, 1726,   56,   52, 2004,
     1731, 1728,   56,   52, 2004,   56,   52,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52, 1733, 1735, 2004, 1736,   56,   52, 1732,   56,   52,
       56,   52, 2004, 1734,   56,   52,   56,   52,   56,   52,
       56,   52,   56,   52, 1737, 2004, 1738, 2004, 1741, 1739,
       56,   52,   56,   52,   56,   52, 2004, 1743,   56,   52,

     1744, 1740,   56,   52, 1748, 1749,   56,   52, 1742,   56,
       52, 1750, 1751,   56,   52,   56,   52,   56,   52, 1752,
       56,   52, 1747, 2004, 1745,   56,   52, 1746, 2004, 1753,
       56,   52,   56,   52,   56,   52, 2004, 1757,   56,   52,
       56,   52,   56,   52,   56,   52, 1756, 1754,   56,   52,
     1755, 1761,   56,   52, 1758,   56,   52, 2004, 1759, 2004,
       56,   52, 2004, 1762,   56,   52,   56,   52, 1760, 1765,
       56,   52,   56,   52,   56,   52,   56,   52, 1764,   56,
       52, 2004, 1763, 1767, 2004, 1766,   56,   52,   56,   52,
     2004, 1771,   56,   52, 1769,   56,   52,   56,   52, 2004,

     1768, 1770, 1772,   56,   52,   56,   52,   56,   52, 2004,
     1773,   56,   52, 2004, 1774,   56,   52,   56,   52,   56,
       52, 2004,   56,   52, 1776, 2004, 1777,   56,   52, 2004,
     1775,   56,   52,   56,   52,   56,   52, 2004, 1780,   56,
       52, 2004, 1778, 2004, 1782, 2004, 1779, 1781,   56,   52,
     1784, 1783, 1785,   56,   52, 2004, 1786,   56,   52,   56,
       52,   56,   52,   56,   52, 1788, 2004, 1787,   56,   52,
       56,   52,   56,   52, 1790,   56,   52, 2004,   56,   52,
       56,   52, 1789, 2004,   56,   52,   56,   52, 2004, 1792,
       56,   52, 2004, 1791, 1793,   56,   52, 2004, 1795, 1796,

       56,   52, 1794,   56,   52,   56,   52, 1800,   56,   52,
     2004, 1797, 1798,   56,   52, 1799, 1801,   56,   52,   56,
       52, 1802,   56,   52,   56,   52,   56,   52,   56,   52,
     2004,   56,   52,   56,   52, 2004,   56,   52,   56,   52,
       56,   52, 2004, 1807,   56,   52, 1806, 1805, 1809,   56,
       52, 2004,   56,   52, 1804,   56,   52, 1803,   56,   52,
     1808, 1810,   56,   52,   56,   52,   56,   52,   56,   52,
     1811,   56,   52,   56,   52, 2004, 1812,   56,   52, 1813,
     1814, 2004, 1816,   56,   52,   56,   52, 1819, 2004, 1817,
     1818, 1815,   56,   52,   56,   52,   56,   52,   56,   52,

     1822, 1821,   56,   52,   56,   52, 2004, 1820,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
     1825, 1826,   56,   52, 1827,   56,   52, 2004, 1823,   56,
       52, 1824, 2004, 1831,   56,   52,   56,   52, 1828, 2004,
     1829, 1835, 2004, 1834, 2004, 1836, 1830, 2004, 1832, 2004,
     1833,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52, 2004, 1838, 2004, 1837,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52, 2004, 1842,   56,
       52,   56,   52, 2004, 1839,   56,   52,   56,   52, 1841,
       56,   52,   56,   52, 2004, 1840,   56,   52, 2004,   56,

       52,   56,   52,   56,   52, 1843,   56,   52,   56,   52,
       56,   52, 1845,   56,   52,   56,   52, 1846, 2004, 1844,
       56,   52, 1847, 1849, 2004,   56,   52,   56,   52, 2004,
     1848, 1851, 1850, 1854, 2004, 1852, 2004, 1855,   56,   52,
       56,   52, 2004, 1857, 1853,   56,   52,   56,   52, 1856,
     1858,   56,   52,   56,   52, 2004, 1859,   56,   52,   56,
       52, 2004,   56,   52, 2004, 1861, 2004, 1860,   56,   52,
       56,   52, 2004, 1862,   56,   52,   56,   52,   56,   52,
     2004,   56,   52, 1865, 2004, 1863,   56,   52, 2004, 1864,
     1866, 2004, 1867, 1870, 2004, 1871,   56,   52,   56,   52,

       56,   52, 1868, 2004, 1869, 1872, 2004,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52, 1873,   56,   52,
       56,   52,   56,   52,   56,   52, 2004,   56,   52, 2004,
     1874,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52, 1875, 1876, 1878,   56,   52, 2004, 1877, 1882,   56,
       52, 1879, 1881,   56,   52,   56,   52, 1884, 2004, 1883,
     2004, 1880,   56,   52, 1885,   56,   52,   56,   52, 1886,
       56,   52, 1887,   56,   52,   56,   52,   56,   52, 1889,
     2004,   56,   52, 2004, 1894, 1888, 1891,   56,   52,   56,
       52, 1890,   56,   52, 1892,   56,   52, 1893, 1896,   56,

       52, 1897,   56,   52, 1898,   56,   52, 1895, 2004, 1899,
       56,   52, 1900,   56,   52, 2004, 1901,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52,   56,   52, 1902,
       56,   52, 2004,   56,   52,   56,   52,   56,   52, 1904,
       56,   52, 1903,   56,   52, 2004, 1906,   56,   52, 2004,
       56,   52, 2004,   56,   52, 1905, 2004, 1907, 1911,   56,
       52, 1909, 2004, 1908, 1910, 1913, 2004, 1912, 1914, 1916,
     1917, 2004, 1915,   56,   52, 2004, 1918,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52,   56,   52, 2004,
       56,   52,   56,   52,   56,   52,   56,   52, 1920,   56,

       52, 1919,   56,   52, 2004, 1922, 1924, 1923, 1925,   56,
       52,   56,   52, 1921,   56,   52, 1926, 2004, 1928,   56,
       52,   56,   52, 1927,   56,   52, 1929,   56,   52,   56,
       52,   56,   52,   56,   52,   56,   52,   56,   52, 2004,
     1930,   56,   52,   56,   52, 1933,   56,   52, 1935, 1932,
     2004,   56,   52, 1931,   56,   52,   56,   52, 1938, 2004,
     1934, 2004, 1936,   56,   52, 1940,   56,   52, 2004, 1937,
     1941, 1942, 2004, 1943, 2004, 1939,   56,   52,   56,   52,
     1944,   56,   52,   56,   52,   56,   52,   56,   52,   56,
       52,   56,   52, 1946, 1945,   56,   52,   56,   52, 1947,

     1949,   56,   52, 2004, 1951,   56,   52,   56,   52,   56,
       52,   56,   52, 2004, 1950, 1953, 2004, 1948,   56,   52,
       56,   52, 2004,   56,   52, 1952, 1955, 1954,   56,   52,
     1957,   56,   52,   56,   52, 2004, 1956,   56,   52, 2004,
     1960, 2004, 1958, 1961, 2004, 1962, 1959,   56,   52,   56,
       52, 2004,   56,   52,   56,   52,   56,   52,   56,   52,
       56,   52,   56,   52,   56,   52, 1965, 1963,   56,   52,
       56,   52,   56,   52,   56,   52,   56,   52, 2004, 1964,
     1966,   56,   52,   56,   52,   56,   52, 2004,   56,   52,
     2004, 1967, 1970, 2004, 1971, 2004, 1968,   56,   52, 1972,

       56,   52, 1969, 2004,   56,   52,   56,   52, 2004,   56,
       52,   56,   52,   56,   52, 1973, 1975, 1974,   56,   52,
       56,   52,   56,   52, 2004, 1979, 1980, 1976, 1978,   56,
       52, 1977,   56,   52,   56,   52,   56,   52, 1982,   56,
       52,   56,   52,   56,   52, 1983, 1981,   56,   52, 1986,
       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
     1984,   56,   52, 1985, 1988, 1987, 1990, 2004, 1991, 2004,
       56,   52,   56,   52,   56,   52,   56,   52,   56,   52,
     2004, 1989, 1992,   56,   52, 1994,   56,   52, 1993, 1995,
       56,   52,   56,   52,   56,   52,   56,   52, 1997,   56,

       52,   56,   52, 1996, 2004, 2004, 2004, 2001, 2004, 2004,
     2004, 2004, 1998, 2004, 1999, 2004, 2004, 2000, 2004, 2004,
     2004, 2004, 2004, 2002, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2003,   45,   45,   45,   45,   45,   45,
       45,   45,   50, 2004, 2004,   50,   50,   50,   50,   54,
       54,   54,   54,   54,   96,   96,   96,   96,   98,   98,
       98,  158, 2004,  158,  234, 2004, 2004,  234,    3, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,

     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004
    } ;

static yyconst short int yy_chk[6927] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   15,   23,   23,
       24,   24,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   27,   27,   29,   29,   54,   54,
     2006,   34,   34,   39,   39,   61,   61,  100,   26,   26,
       25,   25,  100,   29,   24,  158,   24,   28,   28,   34,

       30,   30,   61,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   25,   26,   26,   39,   28,
       95,   25,   31,   31,   32,   32,   52,   28,   30,   50,
       33,   33,   57,   57,   47,   35,   35,   36,   36,   93,
       37,   37,   45,   58,   58,   59,   59,   31,   33,   44,
       60,   60,   35,   32,   32,   35,    8,   37,   36,   63,
       63,   64,   64,   35,   37,   33,   33,   37,   57,   35,
       35,   37,   62,   62,   93,   59,   37,   38,   38,   58,
       60,   63,   65,   65,   66,   66,   67,   67,   62,   69,
       69,    5,   70,   70,   38,    3,   38,   64,   38,   68,

       68,   72,   72,   71,   71,  159,   67,  159,   38,    0,
       65,   38,   38,   38,   40,   66,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   71,    0,   69,   70,    0,
       72,   68,    0,   73,   73,   96,   96,   77,   77,   88,
       88,   92,   92,   76,   76,    0,   74,   74,    0,   40,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   73,
       76,    0,   92,   79,   79,   74,   75,   75,   77,   51,
       55,   88,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   74,   75,   78,   78,    0,   55,   55,   55,   55,
       55,   55,   55,   79,   80,   80,   79,    0,   75,   78,

       81,   81,   75,   75,   82,   82,   83,   83,   84,   84,
       85,   85,    0,   86,   86,   78,    0,   81,   87,   87,
      160,   78,  160,   80,    0,   84,   85,    0,   83,   82,
       85,    0,   80,   89,   89,   94,   94,   85,   86,    0,
       86,   91,   91,   83,   90,   90,  102,  102,  105,  105,
       89,   94,    0,  108,  108,  103,  103,   91,   87,  104,
      104,   90,  161,   91,  161,  125,  125,   94,    0,  105,
       89,  102,    0,   94,  108,    0,   91,  184,  184,   90,
       97,   97,   97,   97,   97,   97,   97,   97,   97,  103,
      104,  106,  106,  109,  109,  110,  110,  107,  107,   97,

       99,  125,   99,  111,  111,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  107,    0,  107,  107,  112,  112,
      107,  111,  113,  113,  114,  114,  106,  109,  107,    0,
      110,  115,  115,  116,  116,  117,  117,    0,  112,    0,
      118,  118,  119,  119,    0,  114,  120,  120,  121,  121,
      113,  117,    0,  127,  127,  122,  122,  123,  123,    0,
      115,  118,    0,  124,  124,  126,  126,    0,  116,  119,
      121,  122,  127,  123,  128,  128,  129,  129,  123,  124,
        0,  120,    0,  121,  130,  130,  131,  131,  126,  132,
      132,  126,  133,  133,  134,  134,    0,  129,  135,  135,

      136,  136,  138,  138,  130,  137,  137,    0,  128,    0,
      139,  139,    0,  133,  134,  140,  140,  141,  141,  143,
      143,  132,    0,  131,    0,  138,    0,  139,  135,  139,
      139,  142,  142,  141,    0,  140,  136,  144,  144,  137,
      145,  145,  146,  146,    0,  139,  139,  142,  147,  147,
      143,  148,  148,    0,  149,  149,  145,  150,  150,  144,
      151,  151,    0,  152,  152,  153,  153,  155,  155,  147,
      149,    0,  146,  144,  157,  157,  150,  150,  156,  156,
      148,    0,  151,  162,  162,    0,  155,    0,  163,  163,
      164,  164,  150,    0,  153,  157,  150,  152,    0,  153,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  165,
      165,    0,  156,  163,  166,  166,  167,  167,  162,  168,
      168,  169,  169,    0,  164,  170,  170,  171,  171,  172,
      172,  173,  173,  174,  174,    0,  176,  176,  165,  175,
      175,    0,  169,    0,  165,  171,  177,  177,  172,  166,
      168,    0,  167,  170,  174,    0,  175,  176,    0,  171,
      178,  178,  179,  179,  180,  180,    0,  177,    0,  181,
      181,    0,  173,    0,  182,  182,    0,  183,  183,  185,
      185,  186,  186,  179,  191,  191,    0,  181,  180,  181,
      188,  188,  181,  182,  178,  189,  189,  192,  192,  181,

        0,  181,  183,    0,  185,    0,  191,  193,  193,    0,
      188,    0,  188,  194,  194,  195,  195,  186,  187,  187,
      188,    0,  188,  200,  200,  188,    0,  188,  193,    0,
      189,  192,  196,  196,  199,  199,  187,  187,  187,  187,
      197,  197,  201,  201,  194,    0,  195,    0,  187,    0,
      187,  198,  198,  187,  187,  190,  190,  190,    0,  190,
        0,  197,  199,  201,  202,  202,  196,  190,    0,  190,
      203,  203,  190,  190,  190,    0,  198,  204,  204,  205,
      205,    0,  202,  206,  206,  207,  207,  208,  208,  209,
      209,    0,  210,  210,  211,  211,  204,  212,  212,    0,

      205,  213,  213,  214,  214,  216,  216,  215,  215,  203,
      209,  206,  208,  210,  210,    0,  207,  212,  212,    0,
      213,  209,  207,  215,  218,  218,  219,  219,  211,    0,
      220,  220,    0,  213,    0,  214,  213,  222,  222,  227,
      227,    0,  216,  217,  217,  223,  223,  221,  221,    0,
      224,  224,  226,  226,  222,  225,  225,    0,  227,  218,
      217,  217,  220,  217,  221,  221,  221,    0,  226,    0,
      223,  217,  217,  228,  228,  217,  229,  229,  217,  231,
      231,  221,  224,  221,  232,  232,  225,  233,  233,    0,
      228,  235,  235,  236,  236,    0,  229,  237,  237,  238,

      238,  239,  239,    0,  240,  240,  241,  241,  242,  242,
      231,  236,  244,  244,  229,  232,  238,  243,  243,  245,
      245,  233,    0,  246,  246,    0,  237,  235,  247,  247,
      248,  248,    0,  239,  240,  249,  249,    0,  242,  243,
      250,  250,  241,  244,  246,  245,  251,  251,  252,  252,
      253,  253,  254,  254,  255,  255,  256,  256,  257,  257,
      259,  259,  248,    0,  247,    0,  258,  258,  250,  260,
      260,  255,    0,  256,    0,  257,  251,  252,    0,  257,
      261,  261,  262,  262,    0,  253,  260,    0,  254,  263,
      263,  259,    0,  256,  258,    0,  264,  264,  265,  265,

      266,  266,  267,  267,  268,  268,  269,  269,  270,  270,
      271,  271,  262,    0,  273,  273,  261,  272,  272,  273,
      274,  274,    0,  265,  275,  275,  265,  267,    0,  263,
      264,  266,  276,  276,  272,  273,    0,  269,  272,  270,
      277,  277,  271,  270,  268,  278,  278,    0,  274,  276,
      276,  279,  279,  280,  280,  275,  281,  281,  282,  282,
      283,  283,    0,  278,  277,  278,  284,  284,  285,  285,
        0,  286,  286,  287,  287,  288,  288,    0,  280,  282,
      278,  280,    0,  289,  289,    0,  279,  281,  286,    0,
      287,  283,  290,  290,  287,  291,  291,  284,    0,  285,

      289,  292,  292,  285,  293,  293,  288,  294,  294,  295,
      295,  290,  296,  296,  297,  297,  298,  298,  299,  299,
        0,  300,  300,    0,  292,  291,  301,  301,  302,  302,
      303,  303,    0,  296,    0,  299,  304,  304,    0,  293,
        0,  294,  300,  295,  305,  305,    0,  298,  297,  306,
      306,  307,  307,  308,  308,    0,  309,  309,    0,  303,
      302,    0,  310,  310,  311,  311,  305,  312,  312,    0,
      304,    0,  307,  309,  313,  313,    0,  306,  310,  314,
      314,    0,  308,  315,  315,  316,  316,  318,  318,  311,
        0,  313,    0,  308,  319,  319,  314,  312,  320,  320,

        0,  316,    0,  321,  321,    0,  322,  322,  324,  324,
      323,  323,  330,  330,  319,  315,  317,  317,    0,  325,
      325,  318,  326,  326,  329,  329,  320,  322,  321,  328,
      328,  333,  333,  317,  321,  320,  327,  327,  317,  317,
      325,  323,  324,  330,  317,  317,  317,  323,  317,  317,
      331,  331,  327,    0,  326,    0,  325,  328,  332,  332,
      333,  329,  334,  334,  335,  335,  336,  336,    0,  337,
      337,  331,  339,  339,  338,  338,  340,  340,    0,  332,
        0,  341,  341,    0,  334,  335,  342,  342,  337,  337,
      338,  343,  343,  344,  344,  345,  345,  340,  347,  347,

      336,  337,  341,    0,  339,  346,  346,  348,  348,  349,
      349,    0,  350,  350,  343,  347,  342,  351,  351,  352,
      352,  346,  353,  353,  355,  355,  354,  354,  344,  350,
      349,  356,  356,  357,  357,  358,  358,  359,  359,  360,
      360,    0,  346,  348,  354,  355,    0,  353,    0,  357,
        0,  351,    0,  359,  352,  361,  361,  362,  362,  363,
      363,  364,  364,  365,  365,  356,  358,  366,  366,  367,
      367,  368,  368,  369,  369,    0,  361,    0,  362,  370,
      370,  364,    0,  363,  371,  371,  372,  372,  373,  373,
      368,  374,  374,  375,  375,    0,  366,    0,  365,  376,

      376,  377,  377,  367,  369,  378,  378,  368,  379,  379,
        0,  373,  374,  370,  375,  380,  380,    0,  371,  381,
      381,  372,  377,  382,  382,  383,  383,  385,  385,  376,
      379,  384,  384,  378,  386,  386,  387,  387,  389,  389,
      388,  388,  390,  390,  391,  391,  392,  392,  382,    0,
      383,  380,  384,  381,  393,  393,  387,  385,  382,  388,
      394,  394,    0,  391,    0,  395,  395,  396,  396,  389,
      398,  398,  397,  397,  386,    0,  390,  399,  399,  400,
      400,  401,  401,  402,  402,  393,  395,  392,  397,  403,
      403,  396,  404,  404,  405,  405,  406,  406,  399,    0,

      398,  394,  407,  407,  408,  408,  402,  400,  409,  409,
        0,  410,  410,  401,  411,  411,  412,  412,    0,  405,
      413,  413,    0,  403,    0,  406,    0,  404,  414,  414,
      415,  415,  407,    0,  416,  416,  417,  417,    0,  408,
      410,    0,  409,    0,  408,  418,  418,  419,  419,    0,
      411,  412,    0,  414,  413,  416,  420,  420,  421,  421,
      422,  422,  423,  423,    0,  415,  424,  424,  426,  426,
      417,  425,  425,  427,  427,  428,  428,  419,  429,  429,
        0,  418,  430,  430,  422,    0,  431,  431,    0,  426,
      420,    0,  427,  425,  423,  432,  432,  434,  434,    0,

      424,  430,  433,  433,  431,  431,    0,  428,  435,  435,
      436,  436,  437,  437,  429,  431,    0,  438,  438,  433,
      439,  439,    0,  440,  440,  431,  434,  441,  441,  437,
      432,    0,  437,    0,  436,    0,  442,  442,    0,  437,
      440,  443,  443,  435,  444,  444,  437,  438,  439,  445,
      445,    0,  441,  442,    0,  446,  446,  447,  447,  448,
      448,  449,  449,  450,  450,  451,  451,    0,  452,  452,
      455,  455,  443,  453,  453,  444,  446,  447,  454,  454,
      448,  456,  456,  458,  458,  444,  445,  457,  457,    0,
      449,  455,    0,  453,  460,  460,  461,  461,  450,  462,

      462,  451,  452,  463,  463,  457,  454,  464,  464,  456,
      465,  465,  469,  469,  458,  459,  459,  466,  466,  471,
      471,  467,  467,  468,  468,  461,  460,  462,    0,  462,
        0,  465,  459,  459,  459,  459,  459,    0,  463,  466,
      467,  470,  470,  469,  459,  472,  472,  464,  473,  473,
      459,  468,    0,  471,  474,  474,  475,  475,  476,  476,
      477,  477,  478,  478,  472,    0,  470,    0,  472,  480,
      480,  481,  481,  473,  482,  482,  474,  483,  483,    0,
      484,  484,  485,  485,  486,  486,  473,  478,  487,  487,
      475,  489,  489,  476,  477,  479,  479,  495,  495,  481,

      506,  506,  488,  488,    0,  480,    0,  485,  482,  484,
      489,  483,    0,  479,  479,  492,  492,  479,  487,  488,
      486,  490,  490,    0,  479,  491,  491,  479,  494,  494,
      479,  479,  479,  493,  493,  496,  496,    0,  490,    0,
      492,  497,  497,  498,  498,  491,  491,  491,  491,    0,
      493,  499,  499,  500,  500,  501,  501,  491,  494,    0,
      491,    0,  497,    0,  498,    0,  496,  502,  502,  503,
      503,    0,  501,  504,  504,  505,  505,  507,  507,    0,
      500,  508,  508,  499,  502,    0,  509,  509,  510,  510,
      511,  511,  505,  512,  512,  513,  513,  507,  514,  514,

        0,  508,  504,  509,  503,  515,  515,    0,  503,  516,
      516,  517,  517,  518,  518,  520,  520,  513,    0,  510,
      511,  519,  519,    0,  512,  521,  521,  522,  522,    0,
      523,  523,  514,    0,  515,  523,  517,    0,  520,  516,
      519,  524,  524,    0,  521,    0,  522,  525,  525,    0,
      526,  526,  527,  527,    0,  518,  528,  528,  524,  529,
      529,  530,  530,  531,  531,  532,  532,  533,  533,  534,
      534,    0,  535,  535,  536,  536,  525,  526,  537,  537,
      530,    0,  538,  538,  532,  532,  540,  540,  527,    0,
      528,  539,  539,  532,  531,  529,    0,  532,  533,  534,

      541,  541,  532,  535,  542,  542,  543,  543,  545,  545,
      536,  538,  544,  544,  546,  546,  539,  547,  547,  548,
      548,    0,  549,  549,    0,  550,  550,  542,  540,  551,
      551,  544,  541,  552,  552,  553,  553,  545,  547,  549,
        0,  543,  554,  554,    0,  555,  555,  556,  556,    0,
      557,  557,  558,  558,    0,  548,  550,  559,  559,  554,
      560,  560,  552,  561,  561,  551,  555,  557,  556,  562,
      562,  563,  563,  564,  564,  565,  565,    0,  559,    0,
      558,    0,  561,  566,  566,  567,  567,  568,  568,  569,
      569,  570,  570,    0,  572,  572,    0,  560,  571,  571,

      573,  573,    0,  574,  574,    0,  562,    0,  570,    0,
      564,  565,  568,  567,  566,  572,  571,  575,  575,  576,
      576,  577,  577,  569,  574,  578,  578,  579,  579,    0,
      580,  580,  581,  581,    0,  573,  582,  582,  583,  583,
      584,  584,  585,  585,  576,  575,  577,  580,  578,  586,
      586,    0,  579,    0,  587,  587,  588,  588,  589,  589,
      590,  590,  591,  591,  592,  592,  582,  585,    0,  581,
      584,  587,  593,  593,  594,  594,  595,  595,  583,  587,
        0,  592,    0,  586,  596,  596,  597,  597,  598,  598,
      590,  599,  599,  589,  591,  600,  600,  601,  601,    0,

      602,  602,  603,  603,  593,    0,  594,  604,  604,  598,
      605,  605,    0,  595,    0,  597,    0,  601,  606,  606,
      596,  607,  607,  608,  608,  601,    0,  599,  609,  609,
      600,  602,    0,  603,    0,  606,  604,    0,  605,  610,
      610,  611,  611,  606,  612,  612,    0,  608,  613,  613,
        0,  614,  614,  615,  615,  607,  616,  616,  617,  617,
      609,  618,  618,    0,  619,  619,    0,  613,  622,  622,
      610,  620,  620,  621,  621,    0,  611,    0,  617,  623,
      623,  612,  625,  625,  613,  614,  624,  624,  626,  626,
      615,  627,  627,  616,  628,  628,  622,    0,  618,  619,

      629,  629,  620,  624,  621,  630,  630,  625,    0,  623,
        0,  628,  631,  631,  632,  632,  633,  633,  634,  634,
      635,  635,    0,  626,  636,  636,    0,  627,  637,  637,
        0,  629,    0,  633,  638,  638,  630,  639,  639,  640,
      640,    0,  632,  631,    0,  636,  641,  641,    0,  634,
      642,  642,    0,  637,    0,  638,  635,    0,  636,  643,
      643,    0,  644,  644,  640,  645,  645,  646,  646,  647,
      647,  642,    0,  639,  648,  648,    0,  643,  641,  644,
        0,  649,  649,  650,  650,    0,  645,  651,  651,    0,
      652,  652,  653,  653,    0,  646,  654,  654,    0,  655,

      655,  656,  656,  657,  657,  647,  649,  658,  658,    0,
      648,  652,    0,  650,  659,  659,  660,  660,  651,    0,
      654,  661,  661,  653,  662,  662,  653,  658,  654,  655,
      663,  663,  664,  664,  665,  665,    0,  656,    0,  657,
      666,  666,  667,  667,  668,  668,  669,  669,  659,  670,
      670,  671,  671,  672,  672,  673,  673,  664,  663,  667,
      674,  674,  675,  675,  676,  676,    0,  669,    0,  665,
        0,  670,  668,  677,  677,  673,  678,  678,  679,  679,
      671,  676,  680,  680,  681,  681,    0,  672,  682,  682,
      677,  683,  683,    0,  674,  684,  684,  685,  685,  675,

      686,  686,    0,  680,    0,  687,  687,  688,  688,  682,
      689,  689,  678,    0,  679,  690,  690,  691,  691,  692,
      692,  681,  683,    0,  692,  687,  684,  685,  688,  693,
      693,  689,  694,  694,  695,  695,  686,  687,  691,    0,
      687,    0,  687,  696,  696,  697,  697,  698,  698,  699,
      699,  690,  700,  700,    0,  695,  701,  701,  702,  702,
      703,  703,  697,  693,  704,  704,  694,  705,  705,  706,
      706,    0,  700,    0,  696,  707,  707,  703,    0,  708,
      708,    0,  702,  699,    0,  698,  709,  709,  705,    0,
      701,  710,  710,  711,  711,    0,  707,  706,  712,  712,

      704,  708,  713,  713,  714,  714,  715,  715,  716,  716,
      717,  717,    0,  711,    0,  712,    0,  709,  718,  718,
      719,  719,    0,  715,    0,  720,  720,  721,  721,  716,
        0,  713,  722,  722,  714,  723,  723,  724,  724,  725,
      725,  726,  726,    0,  717,  727,  727,  718,  721,  728,
      728,  729,  729,  730,  730,  731,  731,    0,  719,  720,
      732,  732,  722,  733,  733,  734,  734,  725,  729,    0,
      723,    0,  731,  724,    0,  726,  727,    0,  732,  735,
      735,  737,  737,  728,  736,  736,    0,  730,  738,  738,
        0,  733,  739,  739,  740,  740,  741,  741,    0,  734,

      742,  742,  743,  743,  744,  744,  745,  745,  746,  746,
      747,  747,  740,  737,    0,  735,  748,  748,  736,    0,
      739,  749,  749,  738,    0,  744,    0,  750,  750,  746,
        0,  741,    0,  748,  751,  751,  742,  743,  752,  752,
      747,  753,  753,  754,  754,  755,  755,  756,  756,  757,
      757,  758,  758,  759,  759,    0,  749,  750,  752,  751,
        0,  754,  753,  751,  760,  760,  761,  761,  762,  762,
      763,  763,  764,  764,  765,  765,  758,  757,    0,  755,
        0,  766,  766,  760,  759,  767,  767,  769,  769,  762,
      763,  768,  768,  770,  770,  771,  771,  772,  772,    0,

      761,    0,  767,    0,  764,  773,  773,    0,  765,  766,
      769,    0,  768,    0,  772,  774,  774,    0,  771,  775,
      775,  777,  777,  770,    0,  770,  773,  769,  776,  776,
      778,  778,    0,  779,  779,  780,  780,  781,  781,  782,
      782,    0,  783,  783,  784,  784,    0,  785,  785,  774,
      779,    0,  777,  786,  786,  775,  776,  787,  787,  788,
      788,  784,  789,  789,  778,  781,    0,  778,  790,  790,
      780,  782,  783,  785,  782,  791,  791,  792,  792,  788,
      793,  793,    0,  786,  794,  794,  795,  795,  787,    0,
      789,  796,  796,    0,  792,  797,  797,    0,  790,    0,

      791,  798,  798,  799,  799,  800,  800,  801,  801,  793,
      802,  802,  803,  803,  794,  804,  804,  795,    0,  796,
        0,  805,  805,  806,  806,    0,  797,  802,  799,  807,
      807,  808,  808,  809,  809,  810,  810,  798,  805,  800,
      811,  811,  803,  812,  812,    0,  807,  801,  813,  813,
      804,  814,  814,  815,  815,  816,  816,  817,  817,    0,
      811,  818,  818,  806,    0,  810,    0,  819,  819,    0,
      809,  820,  820,  821,  821,  822,  822,  823,  823,    0,
      817,    0,  814,  824,  824,  826,  826,  815,  825,  825,
      821,  818,  819,  816,  827,  827,  828,  828,  829,  829,

        0,  826,  820,  830,  830,  825,  822,  831,  831,  832,
      832,  833,  833,  823,  834,  834,  835,  835,    0,  824,
      836,  836,  837,  837,  838,  838,  829,    0,  838,  839,
      839,  841,  841,  833,    0,  831,    0,  832,  840,  840,
      842,  842,  843,  843,  844,  844,    0,  837,    0,  836,
        0,  834,  845,  845,  846,  846,  847,  847,  840,  841,
        0,  837,  848,  848,  839,  849,  849,  843,  850,  850,
        0,  850,  850,  850,  850,  842,  851,  851,  852,  852,
      845,  853,  853,    0,  846,  854,  854,  847,  855,  855,
      848,  859,  859,  860,  860,  852,    0,  851,    0,  861,

      861,  862,  862,  854,    0,  853,  856,  856,  855,  856,
      856,  856,  856,  857,  857,    0,  857,  857,  857,  857,
      854,  858,  858,  862,  863,  863,    0,  858,    0,  860,
      861,  864,  864,  865,  865,  866,  866,  867,  867,    0,
      858,  868,  868,  869,  869,  870,  870,  871,  871,  872,
      872,  874,  874,  873,  873,  863,  876,  876,  875,  875,
      877,  877,  867,    0,  866,  864,  878,  878,  879,  879,
      880,  880,  871,  870,  873,  875,  867,  881,  881,  882,
      882,  874,  883,  883,  884,  884,    0,  876,  885,  885,
      886,  886,  887,  887,  888,  888,  878,  889,  889,  890,

      890,  884,  891,  891,    0,  883,  892,  892,    0,  882,
        0,  886,    0,  881,  893,  893,  894,  894,  889,  891,
      885,  887,  895,  895,  896,  896,    0,  892,  890,    0,
      888,  897,  897,  898,  898,    0,  894,    0,  899,  899,
      900,  900,  901,  901,  902,  902,  903,  903,  893,  905,
      905,  895,  904,  904,  906,  906,    0,  900,  896,  899,
        0,  898,    0,  897,    0,  902,  901,  907,  907,  904,
      903,  906,  908,  908,  909,  909,    0,  905,  910,  910,
      911,  911,  912,  912,  913,  913,  914,  914,  915,  915,
        0,  908,  916,  916,    0,  910,  917,  917,  907,    0,

      918,  918,  919,  919,    0,  920,  920,  915,    0,  909,
      921,  921,    0,  913,    0,  916,  923,  923,  912,  918,
      918,  914,  918,  922,  922,  924,  924,  917,  925,  925,
      926,  926,  919,  920,  927,  927,  918,  928,  928,    0,
      922,  921,  929,  929,    0,  924,    0,  926,  923,  930,
      930,  931,  931,  932,  932,  933,  933,  934,  934,  935,
      935,  936,  936,    0,  925,    0,  929,  937,  937,  930,
        0,  928,  938,  938,  939,  939,  935,  940,  940,  934,
      941,  941,  931,  936,  933,  932,  942,  942,  935,  937,
      938,  939,  943,  943,  944,  944,  937,  941,  945,  945,

      946,  946,    0,  942,    0,  939,    0,  940,  947,  947,
        0,  941,  948,  948,    0,  945,  951,  951,  949,  949,
      950,  950,  952,  952,    0,  944,  953,  953,  943,  954,
      954,  955,  955,  948,  946,  949,    0,  950,  956,  956,
        0,  950,    0,  947,  953,    0,  957,  957,  951,    0,
      954,  958,  958,  959,  959,    0,  956,    0,  952,  960,
      960,  961,  961,  962,  962,    0,  955,  957,  963,  963,
      964,  964,  965,  965,  959,  966,  966,  967,  967,  968,
      968,  969,  969,  970,  970,  971,  971,    0,  958,    0,
      960,  961,  966,  972,  972,  973,  973,    0,  964,    0,

      974,  974,    0,  965,  976,  976,  969,  975,  975,  968,
        0,  967,  975,  975,    0,  971,  977,  977,    0,  970,
      978,  978,  979,  979,  980,  980,  981,  981,    0,  972,
      974,    0,  982,  982,  983,  983,  985,  985,  976,  984,
      984,  986,  986,    0,  987,  987,    0,  981,  988,  988,
      989,  989,  977,  990,  990,    0,  978,  982,  980,    0,
      984,  991,  991,  983,  987,    0,  985,  986,    0,  992,
      992,  993,  993,  994,  994,  995,  995,  996,  996,  997,
      997,  999,  999,    0,  988,    0,  992,  990,  998,  998,
     1001, 1001,  995, 1000, 1000, 1002, 1002,  991,  992,  992,

     1003, 1003, 1004, 1004,    0,  998, 1004, 1005, 1005,  997,
        0,  999, 1006, 1006, 1000,    0, 1002, 1003, 1007, 1007,
     1008, 1008,    0, 1009, 1009, 1011, 1011, 1010, 1010, 1012,
     1012,    0, 1005, 1011,    0, 1007, 1013, 1013, 1014, 1014,
     1015, 1015,    0, 1006, 1016, 1016, 1017, 1017, 1018, 1018,
     1019, 1019,    0, 1012, 1021, 1021, 1008, 1009, 1010, 1015,
     1020, 1020,    0, 1016,    0, 1020, 1022, 1022, 1023, 1023,
     1024, 1024, 1025, 1025, 1019, 1026, 1026, 1017, 1027, 1027,
     1028, 1028, 1029, 1029, 1030, 1030, 1031, 1031,    0, 1018,
     1031,    0, 1031, 1032, 1032,    0, 1033, 1033, 1034, 1034,

     1035, 1035, 1025, 1036, 1036, 1026, 1038, 1038, 1027,    0,
     1028,    0, 1029, 1033,    0, 1030, 1037, 1037, 1039, 1039,
     1036, 1040, 1040, 1041, 1041, 1034,    0, 1038, 1032, 1042,
     1042, 1043, 1043, 1044, 1044,    0, 1035, 1045, 1045, 1046,
     1046, 1047, 1047, 1048, 1048,    0, 1037, 1049, 1049,    0,
     1043,    0, 1040, 1050, 1050, 1051, 1051, 1052, 1052,    0,
     1046, 1053, 1053,    0, 1048, 1042,    0, 1044, 1054, 1054,
        0, 1055, 1055, 1045, 1056, 1056,    0, 1047, 1052, 1057,
     1057, 1058, 1058, 1049, 1059, 1059,    0, 1051, 1055, 1060,
     1060, 1061, 1061, 1062, 1062, 1063, 1063, 1064, 1064, 1065,

     1065, 1066, 1066, 1067, 1067, 1059, 1068, 1068, 1056, 1069,
     1069, 1070, 1070, 1071, 1071,    0, 1063, 1072, 1072, 1073,
     1073, 1060, 1061, 1068, 1074, 1074,    0, 1069, 1075, 1075,
     1076, 1076, 1067,    0, 1065, 1066, 1077, 1077, 1078, 1078,
     1079, 1079, 1080, 1080, 1081, 1081, 1082, 1082,    0, 1074,
        0, 1083, 1083, 1072, 1084, 1084, 1073, 1085, 1085, 1086,
     1086, 1077, 1075, 1078, 1087, 1087, 1088, 1088, 1089, 1089,
        0, 1084, 1080, 1090, 1090, 1081, 1083, 1079, 1085, 1091,
     1091, 1092, 1092, 1082,    0, 1087, 1088, 1093, 1093, 1094,
     1094, 1095, 1095, 1096, 1096, 1097, 1097, 1086, 1092, 1098,

     1098, 1090, 1099, 1099, 1089,    0, 1093,    0, 1095,    0,
     1094, 1100, 1100,    0, 1096,    0, 1091, 1101, 1101, 1102,
     1102, 1103, 1103, 1099, 1104, 1104, 1105, 1105,    0, 1097,
     1098, 1106, 1106,    0, 1107, 1107, 1100, 1108, 1108, 1109,
     1109, 1110, 1110, 1105, 1102,    0, 1103, 1101,    0, 1104,
     1111, 1111,    0, 1112, 1112, 1113, 1113, 1114, 1114, 1115,
     1115, 1117, 1117, 1116, 1116, 1119, 1119, 1106, 1107, 1108,
     1120, 1120, 1113, 1118, 1118, 1110,    0, 1109, 1121, 1121,
     1124, 1124, 1111, 1112, 1116, 1122, 1122, 1125, 1125, 1115,
        0, 1114, 1118, 1117, 1126, 1126,    0, 1123, 1123, 1119,

     1123, 1123, 1123, 1123, 1120,    0, 1125,    0, 1124, 1122,
     1127, 1127, 1121, 1128, 1128, 1129, 1129, 1130, 1130, 1131,
     1131, 1132, 1132, 1133, 1133, 1134, 1134, 1127, 1135, 1135,
     1126, 1136, 1136, 1137, 1137,    0, 1129, 1130, 1138, 1138,
     1139, 1139,    0, 1140, 1140, 1141, 1141, 1142, 1142, 1131,
     1143, 1143,    0, 1128, 1144, 1144, 1136, 1132,    0, 1134,
     1145, 1145, 1146, 1146, 1135, 1147, 1147,    0, 1138, 1137,
     1142, 1148, 1148, 1149, 1149, 1150, 1150, 1139, 1140,    0,
     1151, 1151,    0, 1146, 1152, 1152, 1153, 1153,    0, 1154,
     1154,    0, 1149, 1155, 1155,    0, 1145, 1151, 1156, 1156,

     1157, 1157, 1158, 1158, 1159, 1159, 1160, 1160,    0, 1150,
     1154, 1161, 1161, 1162, 1162, 1163, 1163,    0, 1152, 1164,
     1164,    0, 1153, 1160, 1155, 1157, 1156, 1158, 1165, 1165,
     1166, 1166, 1167, 1167, 1163,    0, 1161, 1168, 1168,    0,
     1159,    0, 1161, 1169, 1169, 1170, 1170, 1164, 1165, 1171,
     1171, 1172, 1172, 1162,    0, 1166, 1173, 1173, 1174, 1174,
     1175, 1175, 1177, 1177, 1176, 1176, 1178, 1178, 1179, 1179,
        0, 1178,    0, 1168, 1180, 1180, 1181, 1181, 1174, 1171,
     1176,    0, 1182, 1182,    0, 1172,    0, 1170, 1183, 1183,
     1184, 1184, 1185, 1185, 1175, 1179, 1186, 1186, 1187, 1187,

     1188, 1188, 1189, 1189, 1190, 1190, 1191, 1191, 1180, 1192,
     1192,    0, 1181, 1182, 1193, 1193, 1194, 1194, 1183,    0,
     1195, 1195, 1196, 1196, 1198, 1198, 1197, 1197, 1199, 1199,
     1189, 1200, 1200,    0, 1190,    0, 1191, 1201, 1201, 1202,
     1202, 1203, 1203,    0, 1192, 1195, 1197, 1204, 1204, 1198,
     1196, 1193,    0, 1194, 1205, 1205, 1206, 1206, 1199, 1202,
     1207, 1207, 1208, 1208,    0, 1209, 1209, 1210, 1210,    0,
     1203, 1211, 1211, 1201, 1212, 1212, 1213, 1213,    0, 1214,
     1214,    0, 1204, 1215, 1215, 1216, 1216, 1217, 1217, 1205,
     1208,    0, 1206,    0, 1207, 1209,    0, 1218, 1218, 1219,

     1219,    0, 1210, 1220, 1220, 1221, 1221,    0, 1212, 1222,
     1222,    0, 1213, 1214, 1218, 1223, 1223, 1216, 1224, 1224,
     1225, 1225, 1227, 1227, 1217, 1226, 1226, 1222, 1228, 1228,
        0, 1220, 1223, 1229, 1229,    0, 1230, 1230,    0, 1221,
     1225,    0, 1226, 1231, 1231, 1232, 1232, 1233, 1233, 1228,
     1234, 1234, 1227, 1235, 1235, 1236, 1236, 1237, 1237, 1238,
     1238, 1239, 1239,    0, 1232, 1231,    0, 1240, 1240, 1229,
     1230, 1241, 1241, 1242, 1242, 1243, 1243,    0, 1237, 1234,
     1244, 1244, 1245, 1245, 1246, 1246,    0, 1233,    0, 1239,
     1247, 1247, 1236, 1248, 1248, 1250, 1250, 1249, 1249,    0,

     1238, 1240, 1243, 1251, 1251,    0, 1246, 1241, 1242, 1245,
     1252, 1252, 1253, 1253, 1244, 1254, 1254, 1245, 1255, 1255,
     1247, 1248, 1249, 1256, 1256, 1257, 1257, 1250, 1258, 1258,
        0, 1251, 1259, 1259, 1260, 1260, 1254,    0, 1252, 1261,
     1261, 1255, 1262, 1262, 1253, 1263, 1263, 1264, 1264, 1266,
     1266, 1258,    0, 1257, 1257, 1265, 1265, 1267, 1267,    0,
     1268, 1268, 1262, 1269, 1269,    0, 1270, 1270, 1271, 1271,
     1260, 1272, 1272, 1261, 1273, 1273, 1267, 1268,    0, 1265,
     1263, 1274, 1274, 1264, 1275, 1275, 1266, 1270, 1276, 1276,
     1277, 1277, 1278, 1278, 1279, 1279, 1280, 1280, 1269, 1281,

     1281, 1282, 1282, 1283, 1283, 1275,    0, 1277, 1284, 1284,
     1285, 1285, 1286, 1286, 1288, 1288,    0, 1287, 1287, 1281,
     1278, 1287, 1287, 1287, 1276, 1289, 1289, 1290, 1290, 1291,
     1291,    0, 1283, 1292, 1292, 1293, 1293, 1288, 1294, 1294,
     1295, 1295,    0, 1296, 1296, 1297, 1297, 1299, 1299, 1290,
     1291,    0, 1286, 1298, 1298, 1300, 1300,    0, 1292, 1289,
     1301, 1301, 1297,    0, 1302, 1302, 1299, 1303, 1303, 1305,
     1305, 1295, 1304, 1304, 1294, 1296, 1306, 1306, 1307, 1307,
        0, 1298, 1302, 1308, 1308, 1301, 1309, 1309, 1310, 1310,
     1311, 1311, 1314, 1314, 1300, 1312, 1312, 1304, 1303, 1313,

     1313, 1315, 1315, 1316, 1316, 1315, 1318, 1318, 1307, 1305,
     1320, 1320,    0, 1314,    0, 1311, 1313,    0, 1312, 1321,
     1321,    0, 1309, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1319, 1319, 1322, 1322, 1319,    0, 1319,
     1321, 1323, 1323, 1324, 1324, 1325, 1325, 1326, 1326, 1327,
     1327, 1328, 1328, 1329, 1329, 1330, 1330, 1331, 1331, 1332,
     1332,    0, 1323, 1333, 1333,    0, 1334, 1334,    0, 1335,
     1335, 1322, 1336, 1336, 1337, 1337, 1332, 1324, 1326, 1338,
     1338, 1339, 1339, 1330, 1340, 1340, 1341, 1341,    0, 1331,
     1329, 1334, 1335, 1342, 1342, 1343, 1343,    0, 1339, 1344,

     1344, 1345, 1345, 1346, 1346, 1337, 1347, 1347, 1336, 1348,
     1348, 1349, 1349,    0, 1350, 1350, 1351, 1351, 1352, 1352,
     1343,    0, 1353, 1353, 1344, 1354, 1354, 1355, 1355,    0,
     1346, 1350, 1356, 1356, 1357, 1357,    0, 1345, 1358, 1358,
     1348,    0, 1349, 1353, 1359, 1359, 1360, 1360, 1361, 1361,
     1352, 1357, 1355, 1362, 1362,    0, 1354, 1363, 1363, 1364,
     1364,    0, 1356, 1365, 1365,    0, 1360,    0, 1358, 1366,
     1366,    0, 1361, 1367, 1367, 1371, 1371, 1368, 1368, 1363,
        0, 1368,    0, 1368, 1359,    0, 1366, 1362, 1369, 1369,
     1370, 1370, 1367,    0, 1368, 1364, 1368,    0, 1371, 1365,

     1372, 1372, 1368, 1373, 1373, 1369,    0, 1370, 1374, 1374,
     1375, 1375,    0, 1376, 1376, 1377, 1377, 1378, 1378, 1379,
     1379, 1380, 1380, 1381, 1381, 1382, 1382, 1383, 1383, 1375,
     1384, 1384,    0, 1374, 1376,    0, 1385, 1385, 1373, 1378,
     1377, 1386, 1386, 1387, 1387, 1387, 1387, 1387, 1388, 1388,
     1389, 1389,    0, 1382,    0, 1379,    0, 1380, 1381, 1391,
     1391, 1392, 1392, 1383, 1385,    0, 1384, 1389, 1390, 1390,
     1390, 1390, 1390, 1393, 1393, 1394, 1394, 1395, 1395, 1388,
        0, 1386,    0, 1388, 1392, 1396, 1396, 1397, 1397, 1398,
     1398, 1399, 1399, 1400, 1400, 1401, 1401, 1394, 1393, 1402,

     1402, 1403, 1403,    0, 1394, 1397, 1396, 1404, 1404, 1405,
     1405, 1395,    0, 1406, 1406, 1407, 1407, 1409, 1409, 1399,
     1410, 1410, 1403, 1408, 1408, 1400, 1398,    0, 1408, 1401,
     1406,    0, 1407, 1411, 1411, 1412, 1412, 1404, 1413, 1413,
     1414, 1414, 1415, 1415, 1416, 1416, 1418, 1418, 1417, 1417,
     1419, 1419,    0, 1420, 1420, 1422, 1422, 1421, 1421, 1413,
        0, 1424, 1424, 1423, 1423, 1425, 1425, 1426, 1426, 1427,
     1427, 1414, 1415, 1417, 1428, 1428, 1418,    0, 1429, 1429,
     1416, 1420, 1421, 1423, 1424, 1430, 1430, 1431, 1431, 1432,
     1432, 1422, 1433, 1433,    0, 1423,    0, 1426, 1423, 1429,

     1434, 1434, 1425, 1435, 1435,    0, 1431, 1436, 1436,    0,
     1430, 1437, 1437, 1432, 1438, 1438, 1439, 1439, 1440, 1440,
     1441, 1441, 1442, 1442, 1443, 1443, 1444, 1444, 1445, 1445,
     1446, 1446, 1447, 1447,    0, 1447, 1447, 1447, 1447, 1448,
     1448, 1449, 1449, 1451, 1451, 1448, 1450, 1450, 1452, 1452,
     1446, 1453, 1453,    0, 1454, 1454, 1455, 1455, 1457, 1457,
        0, 1456, 1456, 1458, 1458,    0, 1459, 1459, 1460, 1460,
     1461, 1461, 1462, 1462,    0, 1455,    0, 1449, 1463, 1463,
     1450, 1451, 1454, 1453, 1452, 1456, 1464, 1464,    0, 1461,
     1465, 1465, 1466, 1466, 1467, 1467,    0, 1458, 1459, 1468,

     1468, 1469, 1469, 1470, 1470, 1471, 1471, 1464, 1460, 1472,
     1472, 1466, 1473, 1473, 1474, 1474,    0, 1475, 1475,    0,
     1465, 1475, 1470,    0, 1471, 1476, 1476, 1477, 1477, 1478,
     1478, 1479, 1479, 1469, 1480, 1480,    0, 1472, 1481, 1481,
     1482, 1482, 1483, 1483,    0, 1473, 1484, 1484, 1477, 1485,
     1485,    0, 1486, 1486, 1487, 1487, 1489, 1489, 1488, 1488,
     1490, 1490, 1479, 1490, 1490,    0, 1478, 1491, 1491,    0,
     1481, 1480, 1492, 1492, 1494, 1494, 1482, 1485, 1488, 1493,
     1493,    0, 1483, 1486, 1487,    0, 1484,    0, 1495, 1495,
     1496, 1496, 1489, 1497, 1497, 1498, 1498, 1499, 1499,    0,

     1492, 1500, 1500,    0, 1491, 1491, 1491,    0, 1501, 1501,
     1493, 1495, 1502, 1502,    0, 1494, 1498,    0, 1497, 1503,
     1503,    0, 1500, 1504, 1504, 1496, 1505, 1505, 1499, 1501,
     1506, 1506,    0, 1502, 1507, 1507, 1508, 1508, 1509, 1509,
     1510, 1510, 1511, 1511, 1512, 1512, 1513, 1513, 1514, 1514,
     1503, 1515, 1515,    0, 1516, 1516,    0, 1509, 1508, 1504,
     1517, 1517, 1518, 1518, 1519, 1519, 1520, 1520, 1521, 1521,
        0, 1522, 1522, 1523, 1523,    0, 1510, 1517,    0, 1518,
        0, 1515, 1516, 1524, 1524,    0, 1521, 1520, 1525, 1525,
     1526, 1526, 1527, 1527, 1523, 1528, 1528,    0, 1519, 1522,

     1529, 1529, 1530, 1530, 1524, 1531, 1531,    0, 1525, 1532,
     1532, 1533, 1533, 1534, 1534, 1536, 1536, 1535, 1535, 1537,
     1537,    0, 1539, 1539, 1540, 1540, 1526, 1528, 1527, 1538,
     1538, 1541, 1541, 1542, 1542,    0, 1533, 1543, 1543, 1531,
     1544, 1544, 1537, 1536, 1534, 1532, 1535, 1539, 1545, 1545,
     1538, 1546, 1546, 1547, 1547, 1540,    0, 1542, 1548, 1548,
     1549, 1549,    0, 1541,    0, 1549, 1550, 1550, 1551, 1551,
     1552, 1552,    0, 1543, 1547, 1553, 1553, 1554, 1554, 1555,
     1555,    0, 1546, 1555,    0, 1555, 1556, 1556, 1557, 1557,
     1558, 1558, 1559, 1559, 1548, 1560, 1560, 1561, 1561, 1562,

     1562, 1563, 1563, 1564, 1564, 1565, 1565, 1566, 1566,    0,
     1565, 1565, 1568, 1568, 1567, 1567, 1569, 1569, 1561, 1570,
     1570, 1571, 1571,    0, 1566,    0, 1559, 1572, 1572, 1573,
     1573, 1568, 1560, 1560, 1567, 1562,    0, 1569, 1574, 1574,
     1575, 1575, 1576, 1576, 1570,    0, 1577, 1577, 1578, 1578,
     1579, 1579, 1581, 1581,    0, 1580, 1580, 1581, 1582, 1582,
     1583, 1583, 1573,    0, 1572, 1584, 1584, 1585, 1585, 1586,
     1586,    0, 1576, 1587, 1587, 1574,    0, 1588, 1588,    0,
     1575, 1577, 1578, 1580, 1579, 1589, 1589, 1590, 1590, 1591,
     1591, 1592, 1592, 1587,    0, 1585,    0, 1584, 1588, 1593,

     1593, 1594, 1594, 1595, 1595, 1596, 1596, 1586, 1597, 1597,
        0, 1598, 1598, 1599, 1599, 1600, 1600, 1601, 1601, 1602,
     1602, 1603, 1603,    0, 1596, 1604, 1604, 1605, 1605, 1594,
        0, 1595, 1598, 1606, 1606,    0, 1596,    0, 1597, 1607,
     1607, 1608, 1608, 1599, 1612, 1612,    0, 1605,    0, 1600,
        0, 1610, 1610, 1601,    0, 1603,    0, 1602, 1608, 1604,
        0, 1607, 1609, 1609, 1609, 1609, 1611, 1611, 1613, 1613,
     1606, 1610, 1614, 1614, 1615, 1615, 1616, 1616, 1617, 1617,
     1612, 1618, 1618, 1611, 1619, 1619, 1620, 1620, 1621, 1621,
     1622, 1622,    0, 1614, 1623, 1623,    0, 1616, 1613, 1617,

     1618, 1624, 1624, 1615, 1625, 1625,    0, 1622, 1626, 1626,
     1627, 1627,    0, 1619, 1628, 1628,    0, 1629, 1629, 1630,
     1630, 1632, 1632,    0, 1631, 1631, 1633, 1633, 1634, 1634,
     1624, 1635, 1635, 1625,    0, 1628, 1636, 1636,    0, 1626,
     1627, 1625, 1629, 1630, 1631, 1637, 1637, 1638, 1638, 1639,
     1639, 1633, 1640, 1640,    0, 1632,    0, 1636,    0, 1634,
     1641, 1641, 1642, 1642, 1643, 1643,    0, 1635, 1644, 1644,
     1645, 1645, 1646, 1646,    0, 1637, 1647, 1647, 1648, 1648,
     1649, 1649, 1638,    0, 1639, 1643, 1650, 1650, 1651, 1651,
        0, 1652, 1652, 1653, 1653, 1654, 1654, 1655, 1655, 1656,

     1656, 1657, 1657, 1658, 1658, 1659, 1659, 1646, 1660, 1660,
        0, 1651, 1652,    0, 1654, 1655, 1661, 1661, 1657, 1662,
     1662,    0, 1650, 1653,    0, 1653,    0, 1653,    0, 1660,
     1663, 1663,    0, 1661, 1664, 1664, 1656, 1665, 1665,    0,
     1662, 1659, 1666, 1666,    0, 1667, 1667, 1668, 1668, 1669,
     1669, 1670, 1670, 1671, 1671, 1672, 1672, 1673, 1673, 1674,
     1674, 1665, 1667,    0, 1667, 1675, 1675, 1663, 1676, 1676,
     1677, 1677,    0, 1666, 1678, 1678, 1679, 1679, 1680, 1680,
     1681, 1681, 1682, 1682, 1671,    0, 1672,    0, 1676, 1673,
     1683, 1683, 1684, 1684, 1685, 1685,    0, 1679, 1688, 1688,

     1682, 1675, 1686, 1686, 1686, 1686, 1689, 1689, 1678, 1687,
     1687, 1687, 1687, 1690, 1690, 1691, 1691, 1692, 1692, 1688,
     1693, 1693, 1685,    0, 1683, 1694, 1694, 1684,    0, 1689,
     1695, 1695, 1696, 1696, 1697, 1697,    0, 1693, 1698, 1698,
     1699, 1699, 1700, 1700, 1701, 1701, 1692, 1690, 1702, 1702,
     1691, 1697, 1703, 1703, 1694, 1704, 1704,    0, 1695,    0,
     1705, 1705,    0, 1700, 1706, 1706, 1707, 1707, 1696, 1703,
     1708, 1708, 1709, 1709, 1710, 1710, 1711, 1711, 1702, 1712,
     1712,    0, 1701, 1705,    0, 1704, 1713, 1713, 1714, 1714,
        0, 1708, 1715, 1715, 1707, 1716, 1716, 1717, 1717,    0,

     1706, 1707, 1709, 1718, 1718, 1719, 1719, 1720, 1720,    0,
     1710, 1721, 1721,    0, 1712, 1722, 1722, 1723, 1723, 1724,
     1724,    0, 1725, 1725, 1718,    0, 1719, 1726, 1726,    0,
     1716, 1727, 1727, 1728, 1728, 1729, 1729,    0, 1723, 1730,
     1730,    0, 1721,    0, 1726,    0, 1722, 1725, 1731, 1731,
     1728, 1727, 1729, 1732, 1732,    0, 1730, 1733, 1733, 1734,
     1734, 1735, 1735, 1736, 1736, 1731,    0, 1730, 1737, 1737,
     1738, 1738, 1739, 1739, 1733, 1740, 1740,    0, 1741, 1741,
     1742, 1742, 1732,    0, 1743, 1743, 1745, 1745,    0, 1735,
     1744, 1744,    0, 1734, 1736, 1746, 1746,    0, 1738, 1741,

     1747, 1747, 1737, 1748, 1748, 1749, 1749, 1745, 1750, 1750,
        0, 1742, 1743, 1751, 1751, 1744, 1746, 1752, 1752, 1753,
     1753, 1747, 1754, 1754, 1755, 1755, 1756, 1756, 1757, 1757,
        0, 1758, 1758, 1759, 1759,    0, 1760, 1760, 1761, 1761,
     1762, 1762,    0, 1756, 1763, 1763, 1755, 1754, 1758, 1764,
     1764,    0, 1765, 1765, 1753, 1766, 1766, 1752, 1767, 1767,
     1757, 1760, 1768, 1768, 1769, 1769, 1770, 1770, 1771, 1771,
     1761, 1772, 1772, 1773, 1773,    0, 1762, 1774, 1774, 1763,
     1765,    0, 1767, 1775, 1775, 1776, 1776, 1771,    0, 1769,
     1770, 1766, 1777, 1777, 1778, 1778, 1779, 1779, 1780, 1780,

     1775, 1773, 1781, 1781, 1782, 1782,    0, 1772, 1783, 1783,
     1784, 1784, 1785, 1785, 1786, 1786, 1787, 1787, 1789, 1789,
     1780, 1781, 1788, 1788, 1782, 1790, 1790,    0, 1778, 1791,
     1791, 1779,    0, 1787, 1792, 1792, 1793, 1793, 1784,    0,
     1785, 1790,    0, 1789,    0, 1791, 1786,    0, 1787,    0,
     1788, 1794, 1794, 1795, 1795, 1796, 1796, 1797, 1797, 1798,
     1798, 1799, 1799,    0, 1793,    0, 1792, 1800, 1800, 1801,
     1801, 1802, 1802, 1803, 1803, 1804, 1804,    0, 1799, 1805,
     1805, 1806, 1806,    0, 1795, 1807, 1807, 1808, 1808, 1797,
     1809, 1809, 1810, 1810,    0, 1796, 1811, 1811,    0, 1812,

     1812, 1813, 1813, 1814, 1814, 1801, 1815, 1815, 1816, 1816,
     1817, 1817, 1806, 1819, 1819, 1820, 1820, 1807,    0, 1805,
     1818, 1818, 1809, 1812,    0, 1821, 1821, 1822, 1822,    0,
     1810, 1814, 1813, 1817,    0, 1815,    0, 1818, 1823, 1823,
     1824, 1824,    0, 1820, 1816, 1825, 1825, 1826, 1826, 1819,
     1821, 1827, 1827, 1828, 1828,    0, 1822, 1829, 1829, 1830,
     1830,    0, 1831, 1831,    0, 1824,    0, 1823, 1832, 1832,
     1833, 1833,    0, 1825, 1834, 1834, 1835, 1835, 1836, 1836,
        0, 1837, 1837, 1830,    0, 1828, 1838, 1838,    0, 1829,
     1831,    0, 1832, 1835,    0, 1836, 1839, 1839, 1840, 1840,

     1841, 1841, 1833,    0, 1834, 1837,    0, 1842, 1842, 1843,
     1843, 1844, 1844, 1845, 1845, 1846, 1846, 1838, 1847, 1847,
     1849, 1849, 1848, 1848, 1850, 1850,    0, 1851, 1851,    0,
     1839, 1852, 1852, 1853, 1853, 1854, 1854, 1855, 1855, 1856,
     1856, 1841, 1842, 1848, 1857, 1857,    0, 1845, 1852, 1858,
     1858, 1849, 1851, 1859, 1859, 1861, 1861, 1855,    0, 1854,
        0, 1850, 1860, 1860, 1856, 1862, 1862, 1865, 1865, 1857,
     1863, 1863, 1858, 1864, 1864, 1866, 1866, 1868, 1868, 1860,
        0, 1867, 1867,    0, 1865, 1859, 1862, 1869, 1869, 1870,
     1870, 1861, 1871, 1871, 1863, 1873, 1873, 1864, 1867, 1872,

     1872, 1868, 1874, 1874, 1869, 1875, 1875, 1866,    0, 1870,
     1876, 1876, 1871, 1877, 1877,    0, 1872, 1878, 1878, 1879,
     1879, 1880, 1880, 1881, 1881, 1882, 1882, 1883, 1883, 1873,
     1884, 1884,    0, 1885, 1885, 1886, 1886, 1888, 1888, 1879,
     1889, 1889, 1877, 1887, 1887,    0, 1881, 1890, 1890,    0,
     1891, 1891,    0, 1892, 1892, 1880,    0, 1882, 1886, 1893,
     1893, 1884,    0, 1883, 1885, 1888,    0, 1887, 1889, 1891,
     1892,    0, 1890, 1894, 1894,    0, 1893, 1895, 1895, 1896,
     1896, 1897, 1897, 1898, 1898, 1899, 1899, 1900, 1900,    0,
     1901, 1901, 1902, 1902, 1903, 1903, 1904, 1904, 1897, 1905,

     1905, 1895, 1906, 1906,    0, 1899, 1901, 1900, 1902, 1907,
     1907, 1908, 1908, 1898, 1909, 1909, 1903,    0, 1905, 1910,
     1910, 1911, 1911, 1903, 1912, 1912, 1906, 1913, 1913, 1914,
     1914, 1915, 1915, 1916, 1916, 1917, 1917, 1918, 1918,    0,
     1908, 1919, 1919, 1920, 1920, 1911, 1921, 1921, 1913, 1910,
        0, 1922, 1922, 1909, 1923, 1923, 1924, 1924, 1919,    0,
     1912,    0, 1915, 1925, 1925, 1921, 1926, 1926,    0, 1916,
     1922, 1923,    0, 1924,    0, 1920, 1927, 1927, 1928, 1928,
     1925, 1929, 1929, 1930, 1930, 1931, 1931, 1932, 1932, 1933,
     1933, 1934, 1934, 1927, 1926, 1935, 1935, 1936, 1936, 1928,

     1930, 1937, 1937,    0, 1932, 1938, 1938, 1939, 1939, 1940,
     1940, 1941, 1941,    0, 1931, 1935,    0, 1929, 1942, 1942,
     1943, 1943,    0, 1944, 1944, 1933, 1937, 1936, 1945, 1945,
     1940, 1946, 1946, 1947, 1947,    0, 1939, 1948, 1948,    0,
     1943,    0, 1941, 1944,    0, 1945, 1942, 1949, 1949, 1950,
     1950,    0, 1951, 1951, 1952, 1952, 1953, 1953, 1954, 1954,
     1955, 1955, 1956, 1956, 1957, 1957, 1950, 1946, 1958, 1958,
     1959, 1959, 1960, 1960, 1961, 1961, 1962, 1962,    0, 1949,
     1951, 1963, 1963, 1964, 1964, 1965, 1965,    0, 1966, 1966,
        0, 1955, 1960,    0, 1961,    0, 1958, 1967, 1967, 1962,

     1968, 1968, 1959,    0, 1969, 1969, 1970, 1970,    0, 1971,
     1971, 1972, 1972, 1973, 1973, 1963, 1966, 1965, 1974, 1974,
     1975, 1975, 1976, 1976,    0, 1970, 1971, 1967, 1969, 1977,
     1977, 1968, 1978, 1978, 1979, 1979, 1980, 1980, 1973, 1981,
     1981, 1982, 1982, 1983, 1983, 1975, 1972, 1984, 1984, 1978,
     1985, 1985, 1986, 1986, 1987, 1987, 1988, 1988, 1989, 1989,
     1976, 1990, 1990, 1977, 1980, 1979, 1983,    0, 1984,    0,
     1991, 1991, 1992, 1992, 1993, 1993, 1994, 1994, 1995, 1995,
        0, 1982, 1987, 1996, 1996, 1990, 1998, 1998, 1988, 1991,
     1997, 1997, 1999, 1999, 2000, 2000, 2001, 2001, 1993, 2002,

     2002, 2003, 2003, 1992,    0,    0,    0, 1997,    0,    0,
        0,    0, 1994,    0, 1995,    0,    0, 1996,    0,    0,
        0,    0,    0, 1999,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2002, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2007,    0,    0, 2007, 2007, 2007, 2007, 2008,
     2008, 2008, 2008, 2008, 2009, 2009, 2009, 2009, 2010, 2010,
     2010, 2011,    0, 2011, 2012,    0,    0, 2012, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,

     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2004, 2004
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "NSFLexer.l"
#define INITIAL 0
#line 2 "NSFLexer.l"
#if defined(_XENON)
    #include <xtl.h>
#elif defined (WIN32)
    #include "windows.h"
    #include <stdio.h>
    #include <string.h>
    #include <stdlib.h>
#elif defined (_PS3)
    #include <NiSystem.h>
#endif  //#if defined(_XENON)
    #include <NiShaderFactory.h>
    #include "NSFTextFile.h"
    #include "NSFLexSymbol.h"

    extern int iErrors;
    extern YYSTYPE yylval;

    #define SKIP_YYWRAP             1
    #define YY_ALWAYS_INTERACTIVE   1

    extern "C"
    {
        static int NSFParser_line_number=1;
        
        int yywrap() 
        {
            return 1;
        };
    }

    void skip0();
    void skip1();
    unsigned long HexConvert(char* buf);

    extern NSFTextFile* g_pkFile;
    
    void NSFParserResetLineNumber()
    {
        NSFParser_line_number = 1;
    }
    
    int NSFParserGetLineNumber()
    {
        return NSFParser_line_number;
    }
    
    void NSFParsererror(char *s) 
    {
        iErrors++;
        char szErr[1024];
        NiSprintf(szErr, 1024, 
            "* ERROR: Invalid identifier \'%s\' at line %d (%s)\n",
            yytext, NSFParser_line_number, s);
        printf(szErr);
        NiOutputDebugString(szErr);
        if (g_pkFile)
        {
            NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
                "* ERROR: %s\nInvalid identifier \'%s\' at line %d (%s)\n",
                g_pkFile->GetFilename(), yytext, NSFParser_line_number, s);
        }
        else
        {
            NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
                "* ERROR: %s\nInvalid identifier \'%s\' at line %d (%s)\n",
                "*** Unknown File ***", yytext, NSFParser_line_number, s);
        }
    };

    void NSFParsererror2(char *s) 
    {
        iErrors++;
        char szErr[1024];
        NiSprintf(szErr, 1024, 
             "* ERROR: %s at line %d\n",s,NSFParser_line_number);
        printf(szErr);
        NiOutputDebugString(szErr);
        NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
            "* ERROR: %s at line %d\n",s,NSFParser_line_number);
        if (g_pkFile)
        {
            NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
                "* ERROR: %s\n%s at line %d\n",
                g_pkFile->GetFilename(), s, NSFParser_line_number);
        }
        else
        {
            NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
                "* ERROR: %s\n%s at line %d\n",
                "*** Unknown File ***", s, NSFParser_line_number);
        }
    };

    #ifndef D3DVS_VERSION
    #define D3DVS_VERSION(_Major,_Minor) (0xFFFE0000|((_Major)<<8)|(_Minor))
    #endif  //#ifndef D3DVS_VERSION

    #ifndef D3DGS_VERSION
    #define D3DGS_VERSION(_Major,_Minor) (0xFFFD0000|((_Major)<<8)|(_Minor))
    #endif  //#ifndef D3DGS_VERSION

    #ifndef D3DPS_VERSION
    #define D3DPS_VERSION(_Major,_Minor) (0xFFFF0000|((_Major)<<8)|(_Minor))
    #endif  //#ifndef D3DPS_VERSION

    int my_yyinput (char * buf, int max_size);

    #undef YY_INPUT
    #define YY_INPUT(buf,result,max) (result = my_yyinput(buf,max))
    
    #define MAX_QUOTE_LENGTH    6 * 1024

//real            {integer}("."({digit}+))?{exponant}?
#line 2685 "..\\NSFLexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 130 "NSFLexer.l"


#line 2839 "..\\NSFLexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2005 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6869 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 132 "NSFLexer.l"
{ };
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 133 "NSFLexer.l"
{
                        NSFParserlval.ival=(int)atoi(yytext);
                        return N_INT;
                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 137 "NSFLexer.l"
{ 
                        NSFParserlval.fval=(float)atof(yytext);
                        return N_FLOAT;
                    };
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 141 "NSFLexer.l"
{
                        NSFParserlval.dword=HexConvert(yytext);
                        return N_HEX;
                    };
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 146 "NSFLexer.l"
{
                        // Parse out the actual numbers
                        char szNum[32];
                        
                        // Skip the v
                        unsigned int uiIndex = 1;
                        unsigned int uiNumIndex = 0;
                        bool bFoundDot = false;
                        unsigned int uiMaj = 0;
                        unsigned int uiMin = 0;
                        
                        while (yytext[uiIndex] != 0)
                        {
                            bool bEndPack = false;
                            
                            if (yytext[uiIndex] != '.')
                                szNum[uiNumIndex++] = yytext[uiIndex];
                            else
                                bEndPack = true;
                            
                            if (yytext[uiIndex+1] == 0)
                                bEndPack = true;
                                
                            if (bEndPack)
                            {
                                szNum[uiNumIndex] = 0;
                                unsigned int uiNum = atoi(szNum);
                                
                                if (!bFoundDot)
                                    uiMaj = uiNum;
                                else
                                    uiMin = uiNum;
                                bFoundDot = true;
                                uiNumIndex = 0;
                            }
                            uiIndex++;
                        }
                        
                        NSFParserlval.vers = D3DVS_VERSION(uiMaj, uiMin);
                        
                        return N_VERSION;
                    };
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 189 "NSFLexer.l"
{   skip0();                };
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 190 "NSFLexer.l"
{   skip1();                };
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 192 "NSFLexer.l"
{   return L_ACCOLADE;      };
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 193 "NSFLexer.l"
{   return R_ACCOLADE;      };
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 195 "NSFLexer.l"
{   return L_PARENTHESE;    };
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 196 "NSFLexer.l"
{   return R_PARENTHESE;    };
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 198 "NSFLexer.l"
{   return L_BRACKET;       };
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 199 "NSFLexer.l"
{   return R_BRACKET;       };
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 201 "NSFLexer.l"
{   return L_ANGLEBRACKET;  };
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 202 "NSFLexer.l"
{   return R_ANGLEBRACKET;  };
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 204 "NSFLexer.l"
{   return OR;              };
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 206 "NSFLexer.l"
{   return ASSIGN;          };
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 207 "NSFLexer.l"
{   return COMMA;           };
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 209 "NSFLexer.l"
{   return UNDERSCORE;      };
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 211 "NSFLexer.l"
{   return ASTERIK;         };
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 212 "NSFLexer.l"
{   return FORWARDSLASH;    };
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 213 "NSFLexer.l"
{   return PLUS;            };
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 214 "NSFLexer.l"
{   return MINUS;           };
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 216 "NSFLexer.l"
{   return NSFSHADER;       };
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 218 "NSFLexer.l"
{   return PACKINGDEF;      };
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 219 "NSFLexer.l"
{   return PD_STREAM;       };
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 220 "NSFLexer.l"
{   return PD_FIXEDFUNCTION;};
	YY_BREAK
/* Based on D3DVSDE_ macros */
case 28:
YY_RULE_SETUP
#line 223 "NSFLexer.l"
{   return PDP_POSITION;    };
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 224 "NSFLexer.l"
{   return PDP_BLENDWEIGHTS;};
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 225 "NSFLexer.l"
{   return PDP_BLENDWEIGHTS;};
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 226 "NSFLexer.l"
{   return PDP_BLENDINDICES;};
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 227 "NSFLexer.l"
{   return PDP_NORMAL;      };
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 228 "NSFLexer.l"
{   return PDP_POINTSIZE;   };
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 229 "NSFLexer.l"
{   return PDP_POINTSIZE;   };
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 230 "NSFLexer.l"
{   return PDP_COLOR;       };
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 231 "NSFLexer.l"
{   return PDP_COLOR;       };
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 232 "NSFLexer.l"
{   return PDP_COLOR2;      };
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 233 "NSFLexer.l"
{   return PDP_COLOR2;      };
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 234 "NSFLexer.l"
{   return PDP_TEXCOORD0;   };
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 235 "NSFLexer.l"
{   return PDP_TEXCOORD1;   };
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 236 "NSFLexer.l"
{   return PDP_TEXCOORD2;   };
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 237 "NSFLexer.l"
{   return PDP_TEXCOORD3;   };
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 238 "NSFLexer.l"
{   return PDP_TEXCOORD4;   };
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 239 "NSFLexer.l"
{   return PDP_TEXCOORD5;   };
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 240 "NSFLexer.l"
{   return PDP_TEXCOORD6;   };
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 241 "NSFLexer.l"
{   return PDP_TEXCOORD7;   };
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 242 "NSFLexer.l"
{   return PDP_POSITION2;   };
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 243 "NSFLexer.l"
{   return PDP_NORMAL2;     };
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 244 "NSFLexer.l"
{   return PDP_TANGENT;     };
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 245 "NSFLexer.l"
{   return PDP_BINORMAL;    };
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 246 "NSFLexer.l"
{   return PDP_EXTRADATA;   };
	YY_BREAK
/* Based on D3DVSDT_ macros and D3DDECLTYPE_ enumerations */
case 52:
YY_RULE_SETUP
#line 249 "NSFLexer.l"
{   return PDT_FLOAT1;      };
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 250 "NSFLexer.l"
{   return PDT_FLOAT2;      };
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 251 "NSFLexer.l"
{   return PDT_FLOAT3;      };
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 252 "NSFLexer.l"
{   return PDT_FLOAT4;      };
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 253 "NSFLexer.l"
{   return PDT_UBYTECOLOR;  };
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 254 "NSFLexer.l"
{   return PDT_UBYTECOLOR;  };
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 255 "NSFLexer.l"
{   return PDT_SHORT1;      };
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 256 "NSFLexer.l"
{   return PDT_SHORT2;      };
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 257 "NSFLexer.l"
{   return PDT_SHORT3;      };
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 258 "NSFLexer.l"
{   return PDT_SHORT4;      };
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 259 "NSFLexer.l"
{   return PDT_UBYTE4;      };
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 260 "NSFLexer.l"
{   return PDT_NORMSHORT1;  };
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 261 "NSFLexer.l"
{   return PDT_NORMSHORT1;  };
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 262 "NSFLexer.l"
{   return PDT_NORMSHORT2;  };
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 263 "NSFLexer.l"
{   return PDT_NORMSHORT2;  };
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 264 "NSFLexer.l"
{   return PDT_NORMSHORT3;  };
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 265 "NSFLexer.l"
{   return PDT_NORMSHORT3;  };
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 266 "NSFLexer.l"
{   return PDT_NORMSHORT4;  };
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 267 "NSFLexer.l"
{   return PDT_NORMSHORT4;  };
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 268 "NSFLexer.l"
{   return PDT_NORMPACKED3; };
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 269 "NSFLexer.l"
{   return PDT_NORMPACKED3; };
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 270 "NSFLexer.l"
{   return PDT_PBYTE1;      };
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 271 "NSFLexer.l"
{   return PDT_PBYTE2;      };
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 272 "NSFLexer.l"
{   return PDT_PBYTE3;      };
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 273 "NSFLexer.l"
{   return PDT_PBYTE4;      };
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 274 "NSFLexer.l"
{   return PDT_FLOAT2H;     };
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 275 "NSFLexer.l"
{   return PDT_NORMUBYTE4;  };
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 276 "NSFLexer.l"
{   return PDT_NORMUBYTE4;  };
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 277 "NSFLexer.l"
{   return PDT_NORMUSHORT2; };
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 278 "NSFLexer.l"
{   return PDT_NORMUSHORT2; };
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 279 "NSFLexer.l"
{   return PDT_NORMUSHORT4; };
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 280 "NSFLexer.l"
{   return PDT_NORMUSHORT4; };
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 281 "NSFLexer.l"
{   return PDT_UDEC3;       };
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 282 "NSFLexer.l"
{   return PDT_NORMDEC3;    };
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 283 "NSFLexer.l"
{   return PDT_NORMDEC3;    };
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 284 "NSFLexer.l"
{   return PDT_FLOAT16_2;   };
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 285 "NSFLexer.l"
{   return PDT_FLOAT16_4;   };
	YY_BREAK
/* Based on D3DDECLMETHOD_ enumerations */
case 89:
YY_RULE_SETUP
#line 288 "NSFLexer.l"
{   return PDTESS_DEFAULT;          };
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 289 "NSFLexer.l"
{   return PDTESS_PARTIALU;         };
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 290 "NSFLexer.l"
{   return PDTESS_PARTIALV;         };
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 291 "NSFLexer.l"
{   return PDTESS_CROSSUV;          };
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 292 "NSFLexer.l"
{   return PDTESS_UV;               };
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 293 "NSFLexer.l"
{   return PDTESS_LOOKUP;           };
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 294 "NSFLexer.l"
{   return PDTESS_LOOKUPPRESAMPLED; };
	YY_BREAK
/* Based on D3DDECLUSAGE_ enumerations */
case 96:
YY_RULE_SETUP
#line 297 "NSFLexer.l"
{   return PDU_POSITION;    };
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 298 "NSFLexer.l"
{   return PDU_BLENDWEIGHT; };
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 299 "NSFLexer.l"
{   return PDU_BLENDINDICES;};
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 300 "NSFLexer.l"
{   return PDU_NORMAL;      };
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 301 "NSFLexer.l"
{   return PDU_PSIZE;       };
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 302 "NSFLexer.l"
{   return PDU_TEXCOORD;    };
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 303 "NSFLexer.l"
{   return PDU_TANGENT;     };
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 304 "NSFLexer.l"
{   return PDU_BINORMAL;    };
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 305 "NSFLexer.l"
{   return PDU_TESSFACTOR;  };
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 306 "NSFLexer.l"
{   return PDU_POSITIONT;   };
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 307 "NSFLexer.l"
{   return PDU_COLOR;       };
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 308 "NSFLexer.l"
{   return PDU_FOG;         };
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 309 "NSFLexer.l"
{   return PDU_DEPTH;       };
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 310 "NSFLexer.l"
{   return PDU_SAMPLE;      };
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 312 "NSFLexer.l"
{   return ARTIST;          };
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 313 "NSFLexer.l"
{   return HIDDEN;          };
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 314 "NSFLexer.l"
{   return SAVE;            };
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 316 "NSFLexer.l"
{   return ATTRIBUTES;      };
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 317 "NSFLexer.l"
{   return GLOBALATTRIBUTES;};
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 318 "NSFLexer.l"
{   return ATTRIB;          };
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 319 "NSFLexer.l"
{   return ATTRIB_BOOL;     };
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 320 "NSFLexer.l"
{   return ATTRIB_STRING;   };
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 321 "NSFLexer.l"
{   return ATTRIB_UINT;     };
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 322 "NSFLexer.l"
{   return ATTRIB_FLOAT;    };
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 323 "NSFLexer.l"
{   return ATTRIB_POINT2;   };
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 324 "NSFLexer.l"
{   return ATTRIB_POINT3;   };
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 325 "NSFLexer.l"
{   return ATTRIB_POINT4;   };
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 326 "NSFLexer.l"
{   return ATTRIB_MATRIX3;  };
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 327 "NSFLexer.l"
{   return ATTRIB_TRANSFORM;};
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 328 "NSFLexer.l"
{   return ATTRIB_COLOR;    };
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 329 "NSFLexer.l"
{   return ATTRIB_TEXTURE;  };
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 331 "NSFLexer.l"
{   return OBJECTS;                     };
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 332 "NSFLexer.l"
{   return EFFECT_GENERALLIGHT;         };
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 333 "NSFLexer.l"
{   return EFFECT_POINTLIGHT;           };
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 334 "NSFLexer.l"
{   return EFFECT_DIRECTIONALLIGHT;     };
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 335 "NSFLexer.l"
{   return EFFECT_SPOTLIGHT;            };
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 336 "NSFLexer.l"
{   return EFFECT_SHADOWPOINTLIGHT;           };
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 337 "NSFLexer.l"
{   return EFFECT_SHADOWDIRECTIONALLIGHT;     };
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 338 "NSFLexer.l"
{   return EFFECT_SHADOWSPOTLIGHT;            };
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 339 "NSFLexer.l"
{   return EFFECT_ENVIRONMENTMAP;       };
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 340 "NSFLexer.l"
{   return EFFECT_PROJECTEDSHADOWMAP;   };
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 341 "NSFLexer.l"
{   return EFFECT_PROJECTEDLIGHTMAP;    };
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 342 "NSFLexer.l"
{   return EFFECT_FOGMAP;               };
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 344 "NSFLexer.l"
{   return USERDEFINEDDATA; };
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 345 "NSFLexer.l"
{   return IMPLEMENTATION;  };
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 347 "NSFLexer.l"
{   return CLASSNAME;       };
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 349 "NSFLexer.l"
{   return PASS;            };
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 351 "NSFLexer.l"
{   return STAGE;           };
	YY_BREAK
/* Based on D3DTSS_ enumerations */
case 144:
YY_RULE_SETUP
#line 354 "NSFLexer.l"
{   return TSS_TEXTURE;                 };
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 355 "NSFLexer.l"
{   return TSS_COLOROP;                 };
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 356 "NSFLexer.l"
{   return TSS_COLORARG0;               };
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 357 "NSFLexer.l"
{   return TSS_COLORARG1;               };
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 358 "NSFLexer.l"
{   return TSS_COLORARG2;               };
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 359 "NSFLexer.l"
{   return TSS_ALPHAOP;                 };
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 360 "NSFLexer.l"
{   return TSS_ALPHAARG0;               };
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 361 "NSFLexer.l"
{   return TSS_ALPHAARG1;               };
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 362 "NSFLexer.l"
{   return TSS_ALPHAARG2;               };
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 363 "NSFLexer.l"
{   return TSS_RESULTARG;               };
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 364 "NSFLexer.l"
{   return TSS_CONSTANT_DEPRECATED;     };
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 365 "NSFLexer.l"
{   return TSS_BUMPENVMAT00;            };
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 366 "NSFLexer.l"
{   return TSS_BUMPENVMAT01;            };
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 367 "NSFLexer.l"
{   return TSS_BUMPENVMAT10;            };
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 368 "NSFLexer.l"
{   return TSS_BUMPENVMAT11;            };
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 369 "NSFLexer.l"
{   return TSS_BUMPENVLSCALE;           };
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 370 "NSFLexer.l"
{   return TSS_BUMPENVLOFFSET;          };
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 371 "NSFLexer.l"
{   return TSS_TEXCOORDINDEX;           };
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 372 "NSFLexer.l"
{   return TSS_TEXTURETRANSFORMFLAGS;   };
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 373 "NSFLexer.l"
{   return TSS_TEXTURETRANSFORMFLAGS;   };
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 374 "NSFLexer.l"
{   return TSS_TEXTRANSMATRIX;          };
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 375 "NSFLexer.l"
{   return TSS_TEXTRANSMATRIX;          };
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 377 "NSFLexer.l"
{   return TTFF_DISABLE;        };
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 378 "NSFLexer.l"
{   return TTFF_COUNT1;         };
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 379 "NSFLexer.l"
{   return TTFF_COUNT2;         };
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 380 "NSFLexer.l"
{   return TTFF_COUNT3;         };
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 381 "NSFLexer.l"
{   return TTFF_COUNT4;         };
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 382 "NSFLexer.l"
{   return TTFF_PROJECTED;      };
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 384 "NSFLexer.l"
{   return PROJECTED;           };
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 385 "NSFLexer.l"
{   return USEMAPINDEX;         };
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 386 "NSFLexer.l"
{   return USEMAPVALUE;         };
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 387 "NSFLexer.l"
{   return INVERSE;             };
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 388 "NSFLexer.l"
{   return TRANSPOSE;           };
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 390 "NSFLexer.l"
{   return TTSRC_GLOBAL;        };
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 391 "NSFLexer.l"
{   return TTSRC_CONSTANT;      };
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 393 "NSFLexer.l"
{   return TT_WORLD_PARALLEL;       };
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 394 "NSFLexer.l"
{   return TT_WORLD_PERSPECTIVE;    };
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 395 "NSFLexer.l"
{   return TT_WORLD_SPHERE_MAP;     };
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 396 "NSFLexer.l"
{   return TT_CAMERA_SPHERE_MAP;    };
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 397 "NSFLexer.l"
{   return TT_SPECULAR_CUBE_MAP;    };
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 398 "NSFLexer.l"
{   return TT_DIFFUSE_CUBE_MAP;     };
	YY_BREAK
/* Based on D3DTSS_TCI_ enumerations */
case 185:
YY_RULE_SETUP
#line 401 "NSFLexer.l"
{   return TCI_PASSTHRU;            };
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 402 "NSFLexer.l"
{   return TCI_CAMERASPACENORMAL;   };
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 403 "NSFLexer.l"
{   return TCI_CAMERASPACEPOSITION; };
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 404 "NSFLexer.l"
{   return TCI_CAMERASPACEREFLECT;  };
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 405 "NSFLexer.l"
{   return TCI_CAMERASPACEREFLECT;  };
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 406 "NSFLexer.l"
{   return TCI_SPHEREMAP;           };
	YY_BREAK
/* Based on D3DTOP_ enumerations */
case 191:
YY_RULE_SETUP
#line 409 "NSFLexer.l"
{   return TOP_DISABLE;                     };
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 410 "NSFLexer.l"
{   return TOP_SELECTARG1;                  };
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 411 "NSFLexer.l"
{   return TOP_SELECTARG2;                  };
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 412 "NSFLexer.l"
{   return TOP_MODULATE;                    };
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 413 "NSFLexer.l"
{   return TOP_MODULATE2X;                  };
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 414 "NSFLexer.l"
{   return TOP_MODULATE4X;                  };
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 415 "NSFLexer.l"
{   return TOP_ADD;                         };
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 416 "NSFLexer.l"
{   return TOP_ADDSIGNED;                   };
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 417 "NSFLexer.l"
{   return TOP_ADDSIGNED2X;                 };
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 418 "NSFLexer.l"
{   return TOP_SUBTRACT;                    };
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 419 "NSFLexer.l"
{   return TOP_ADDSMOOTH;                   };
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 420 "NSFLexer.l"
{   return TOP_BLENDDIFFUSEALPHA;           };
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 421 "NSFLexer.l"
{   return TOP_BLENDTEXTUREALPHA;           };
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 422 "NSFLexer.l"
{   return TOP_BLENDFACTORALPHA;            };
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 423 "NSFLexer.l"
{   return TOP_BLENDFACTORALPHA;            };
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 424 "NSFLexer.l"
{   return TOP_BLENDFACTORALPHA;            };
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 425 "NSFLexer.l"
{   return TOP_BLENDTEXTUREALPHAPM;         };
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 426 "NSFLexer.l"
{   return TOP_BLENDCURRENTALPHA;           };
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 427 "NSFLexer.l"
{   return TOP_PREMODULATE;                 };
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 428 "NSFLexer.l"
{   return TOP_MODULATEALPHA_ADDCOLOR;      };
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 429 "NSFLexer.l"
{   return TOP_MODULATECOLOR_ADDALPHA;      };
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 430 "NSFLexer.l"
{   return TOP_MODULATEINVALPHA_ADDCOLOR;   };
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 431 "NSFLexer.l"
{   return TOP_MODULATEINVCOLOR_ADDALPHA;   };
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 432 "NSFLexer.l"
{   return TOP_BUMPENVMAP;                  };
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 433 "NSFLexer.l"
{   return TOP_BUMPENVMAPLUMINANCE;         };
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 434 "NSFLexer.l"
{   return TOP_DOTPRODUCT3;                 };
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 435 "NSFLexer.l"
{   return TOP_MULTIPLYADD;                 };
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 436 "NSFLexer.l"
{   return TOP_LERP;                        };
	YY_BREAK
/* Based on D3DTA_ macros */
case 219:
YY_RULE_SETUP
#line 439 "NSFLexer.l"
{   return TA_CURRENT;                      };
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 440 "NSFLexer.l"
{   return TA_DIFFUSE;                      };
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 441 "NSFLexer.l"
{   return TA_SELECTMASK;                   };
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 442 "NSFLexer.l"
{   return TA_SPECULAR;                     };
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 443 "NSFLexer.l"
{   return TA_TEMP;                         };
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 444 "NSFLexer.l"
{   return TA_TEXTURE;                      };
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 445 "NSFLexer.l"
{   return TA_TFACTOR;                      };
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 446 "NSFLexer.l"
{   return TA_ALPHAREPLICATE;               };
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 447 "NSFLexer.l"
{   return TA_COMPLEMENT;                   };
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 449 "NSFLexer.l"
{   return NTM_BASE;    };
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 450 "NSFLexer.l"
{   return NTM_DARK;    };
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 451 "NSFLexer.l"
{   return NTM_DETAIL;  };
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 452 "NSFLexer.l"
{   return NTM_GLOSS;   };
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 453 "NSFLexer.l"
{   return NTM_GLOW;    };
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 454 "NSFLexer.l"
{   return NTM_BUMP;    };
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 455 "NSFLexer.l"
{   return NTM_DECAL;   };
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 456 "NSFLexer.l"
{   return NTM_NORMAL;   };
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 457 "NSFLexer.l"
{   return NTM_PARALLAX;   };
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 459 "NSFLexer.l"
{   return SAMPLER;             };
	YY_BREAK
/* Based on D3DSAMP_ enumerations */
case 238:
YY_RULE_SETUP
#line 462 "NSFLexer.l"
{   return TSAMP_ADDRESSU;                  };
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 463 "NSFLexer.l"
{   return TSAMP_ADDRESSV;                  };
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 464 "NSFLexer.l"
{   return TSAMP_ADDRESSW;                  };
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 465 "NSFLexer.l"
{   return TSAMP_BORDERCOLOR;               };
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 466 "NSFLexer.l"
{   return TSAMP_MAGFILTER;                 };
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 467 "NSFLexer.l"
{   return TSAMP_MINFILTER;                 };
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 468 "NSFLexer.l"
{   return TSAMP_MIPFILTER;                 };
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 469 "NSFLexer.l"
{   return TSAMP_MIPMAPLODBIAS;             };
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 470 "NSFLexer.l"
{   return TSAMP_MAXMIPLEVEL;               };
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 471 "NSFLexer.l"
{   return TSAMP_MAXANISOTROPY;             };
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 472 "NSFLexer.l"
{   return TSAMP_SRGBTEXTURE;               };
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 473 "NSFLexer.l"
{   return TSAMP_ELEMENTINDEX;              };
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 474 "NSFLexer.l"
{   return TSAMP_DMAPOFFSET;                };
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 475 "NSFLexer.l"
{   return TSAMP_ALPHAKILL_DEPRECATED;      };
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 476 "NSFLexer.l"
{   return TSAMP_COLORKEYOP_DEPRECATED;     };
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 477 "NSFLexer.l"
{   return TSAMP_COLORSIGN_DEPRECATED;      };
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 478 "NSFLexer.l"
{   return TSAMP_COLORKEYCOLOR_DEPRECATED;  };
	YY_BREAK
/* Based on D3DSAMP_ enumerations */
case 255:
YY_RULE_SETUP
#line 481 "NSFLexer.l"
{   return TADDR_WRAP;                      };
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 482 "NSFLexer.l"
{   return TADDR_MIRROR;                    };
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 483 "NSFLexer.l"
{   return TADDR_CLAMP;                     };
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 484 "NSFLexer.l"
{   return TADDR_BORDER;                    };
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 485 "NSFLexer.l"
{   return TADDR_MIRRORONCE;                };
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 486 "NSFLexer.l"
{   return TADDR_CLAMPTOEDGE_DEPRECATED;    };
	YY_BREAK
/* Based on D3DTEXF_ enumerations */
case 261:
YY_RULE_SETUP
#line 489 "NSFLexer.l"
{   return TEXF_NONE;                       };
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 490 "NSFLexer.l"
{   return TEXF_POINT;                      };
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 491 "NSFLexer.l"
{   return TEXF_LINEAR;                     };
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 492 "NSFLexer.l"
{   return TEXF_ANISOTROPIC;                };
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 493 "NSFLexer.l"
{   return TEXF_PYRAMIDALQUAD;              };
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 494 "NSFLexer.l"
{   return TEXF_GAUSSIANQUAD;               };
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 495 "NSFLexer.l"
{   return TEXF_QUINCUNX_DEPRECATED;        };
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 496 "NSFLexer.l"
{   return TEXF_FLATCUBIC_DEPRECATED;       };
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 497 "NSFLexer.l"
{   return TEXF_GAUSSIANCUBIC_DEPRECATED;   };
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 498 "NSFLexer.l"
{   return TEXF_MAX_DEPRECATED;             };
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 500 "NSFLexer.l"
{   return TAK_DISABLE_DEPRECATED;  };
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 501 "NSFLexer.l"
{   return TAK_ENABLE_DEPRECATED;   };
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 503 "NSFLexer.l"
{   return TCKOP_DISABLE_DEPRECATED;    };
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 504 "NSFLexer.l"
{   return TCKOP_ALPHA_DEPRECATED;      };
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 505 "NSFLexer.l"
{   return TCKOP_RGBA_DEPRECATED;       };
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 506 "NSFLexer.l"
{   return TCKOP_KILL_DEPRECATED;       };
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 508 "NSFLexer.l"
{   return TEXTURE;         };
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 510 "NSFLexer.l"
{   return TEXTURE_SOURCE; };
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 513 "NSFLexer.l"
{   return RENDERSTATES;    };
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 515 "NSFLexer.l"
{   return CMDEFINED;       };
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 516 "NSFLexer.l"
{   return CMATTRIBUTE;     };
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 517 "NSFLexer.l"
{   return CMCONSTANT;      };
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 518 "NSFLexer.l"
{   return CMGLOBAL;        };
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 519 "NSFLexer.l"
{   return CMOPERATOR;      };
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 520 "NSFLexer.l"
{   return CMOBJECT;        };
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 521 "NSFLexer.l"
{   return VSCONSTANTMAP;   };
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 522 "NSFLexer.l"
{   return PSCONSTANTMAP;   };
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 524 "NSFLexer.l"
{   return BONEMATRIX3;     };
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 525 "NSFLexer.l"
{   return BONEMATRIX4;     };
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 526 "NSFLexer.l"
{   return SKINBONEMATRIX3; };
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 527 "NSFLexer.l"
{   return SKINBONEMATRIX4; };
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 529 "NSFLexer.l"
{   return VSPROGRAM;       };
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 530 "NSFLexer.l"
{   return PSPROGRAM;       };
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 531 "NSFLexer.l"
{   return PROGRAM;         };
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 532 "NSFLexer.l"
{   return ENTRYPOINT;      };
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 533 "NSFLexer.l"
{   return SHADERTARGET;    };
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 534 "NSFLexer.l"
{   return SOFTWAREVP;      };
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 536 "NSFLexer.l"
{   return REQUIREMENTS;            };
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 537 "NSFLexer.l"
{   return VSVERSION;               };
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 538 "NSFLexer.l"
{   return PSVERSION;               };
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 539 "NSFLexer.l"
{   return USERVERSION;             };
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 540 "NSFLexer.l"
{   return PLATFORM;                };
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 541 "NSFLexer.l"
{   return BONESPERPARTITION;       };
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 542 "NSFLexer.l"
{   return BINORMALTANGENTMETHOD;   };
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 543 "NSFLexer.l"
{   return BINORMALTANGENTUVSOURCE;   };
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 544 "NSFLexer.l"
{   return NBTMETHOD_NONE;          };
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 545 "NSFLexer.l"
{   return NBTMETHOD_NI;            };
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 546 "NSFLexer.l"
{   return NBTMETHOD_MAX;           };
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 547 "NSFLexer.l"
{   return NBTMETHOD_ATI;           };
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 549 "NSFLexer.l"
{   
                        NSFParserlval.bval = true;      
                        return N_BOOL;
                    };
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 553 "NSFLexer.l"
{   
                        NSFParserlval.bval = false;
                        return N_BOOL;
                    };
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 558 "NSFLexer.l"
{   NSFParser_line_number++;          }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 559 "NSFLexer.l"
{}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 561 "NSFLexer.l"
{
                        int iLength = (strlen(yytext));
                        NSFParserlval.sval = NiAlloc(char, iLength+1);
                        NiStrncpy(NSFParserlval.sval, iLength+1, yytext, 
                            iLength);
                        return N_STRING;
                    };
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 568 "NSFLexer.l"
{
                        int iLength = (strlen(yytext));
                        NSFParserlval.sval = NiAlloc(char, iLength+1);
                        NiStrncpy(NSFParserlval.sval, iLength+1, yytext, 
                            iLength);
                        return PATH;
                    };
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 576 "NSFLexer.l"
{
                        int iAllocSize;
                        int l = (strlen(yytext) - 2);
                        if (l > MAX_QUOTE_LENGTH)
                        {
                            NIASSERT("Quote too long!");
                            iAllocSize = l;
                        }
                        else
                        {
                            iAllocSize = MAX_QUOTE_LENGTH;
                        }
                        NSFParserlval.sval = NiAlloc(char, iAllocSize+1);
                        NiStrncpy(NSFParserlval.sval, l+1, &yytext[1], l);
                        return N_QUOTE;
                    }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 593 "NSFLexer.l"
ECHO;
	YY_BREAK
#line 4601 "..\\NSFLexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2005 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2005 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2004);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 593 "NSFLexer.l"


void skip0()
{
    char c;
    while (((c = g_pkFile->GetData()[g_pkFile->GetPos()++]) !='\n') && 
        (c != EOF));
    NSFParser_line_number++;
}

void skip1()
{
    char c0,c1;
    while (1)
    {
        c0 = g_pkFile->GetData()[g_pkFile->GetPos()++]; 
        if (c0==EOF)
        {
            printf("err: EOF in comment!\n");
            exit(-1);
        }

        if (c0 == '\n')
            NSFParser_line_number++;

        c1 = g_pkFile->GetData()[g_pkFile->GetPos()++];
        if (c1 == EOF)
        {
            printf("err: EOF in comment!\n");
            exit(-1);
        }

        if ((c0 == '*') && (c1 == '/'))
            break;  

        g_pkFile->GetPos()--;
    }
}

/*********************************************
  This routine is replaces the Flex 
  "internal" YY_INPUT macro
  that it uses to get input
*********************************************/

int my_yyinput (char * buf, int max_size)
{

    if (g_pkFile->GetSize() <= g_pkFile->GetPos()) 
        return YY_NULL;

    char c = g_pkFile->GetData()[g_pkFile->GetPos()++];
    
    if (c == EOF)
        return YY_NULL;

    buf[0] = c;
    buf[1] = 0;

    return 1;
}

unsigned long HexConvert(char* buf)
{
    if (!buf || (strcmp(buf, "") == 0))
        return 0;

    int iLen = strlen(buf);
    int iDigitVal = 1;
    int iValue = 0;
    
    // Skip the terminating 0
    iLen--;
    char* pchCurr = &buf[iLen];
    while ((*pchCurr != 'x') && (*pchCurr != 'X'))
    {
        if ((*pchCurr == 'a') || (*pchCurr == 'A'))
            iValue += iDigitVal * 10;
        else
        if ((*pchCurr == 'b') || (*pchCurr == 'B'))
            iValue += iDigitVal * 11;
        else
        if ((*pchCurr == 'c') || (*pchCurr == 'C'))
            iValue += iDigitVal * 12;
        else
        if ((*pchCurr == 'd') || (*pchCurr == 'D'))
            iValue += iDigitVal * 13;
        else
        if ((*pchCurr == 'e') || (*pchCurr == 'E'))
            iValue += iDigitVal * 14;
        else
        if ((*pchCurr == 'f') || (*pchCurr == 'F'))
            iValue += iDigitVal * 15;
        else
            iValue += iDigitVal * (*pchCurr - '0');
            
        iDigitVal *= 16;
        iLen--;
        pchCurr = &buf[iLen];
    }
    
    return iValue;
}

void NSFParserReset()
{
    YY_NEW_FILE;
} 

void NSFParserReleaseBuffer()
{
    yy_delete_buffer(yy_current_buffer);
}
    
