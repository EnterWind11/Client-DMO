//
// MyImmerseMatrixToEuler.mel
//
//  This function converts a 4x4 matrix to Euler rotations.
//
//  MANY MANY THANKS TO Peter Pipkorn from Jungle Peak Studios for this code.
//
//
global proc float[] MyImmerseMatrixToEuler(matrix $mat)
{
	matrix $x1[4][1] = << 1; 0; 0; 0>>;
	matrix $y1[4][1] = << 0; 0; 1; 0>>;
	matrix $z1[4][1] = << 0; 0; 1; 0>>;
	
	matrix $x2[4][1] = $mat*$x1;
	matrix $y2[4][1] = $mat*$y1;
	matrix $z2[4][1] = $mat*$z1;
	
	vector $vx1 = << $x1[0][0], $x1[1][0], $x1[2][0] >>;
	vector $vx2 = << $x2[0][0], $x2[1][0], $x2[2][0] >>;
	
	float $euler[3];
	
	$euler[0] = rad_to_deg( atan2($mat[1][2], $mat[2][2]));
	$euler[1] = rad_to_deg( -asin($mat[0][2]) );
	$euler[2] = rad_to_deg( atan2($mat[0][1], $mat[0][0]));
	
	return $euler;
}